import type React from "react";
import { useState, useEffect } from "react";
import { AiOutlineDelete, AiFillInstagram } from "react-icons/ai";
import { RiEditLine } from "react-icons/ri";
import { GoChevronLeft, GoChevronRight } from "react-icons/go";
import { LuEye } from "react-icons/lu";
import { FaFacebook } from "react-icons/fa";
import { BiLogoLinkedinSquare } from "react-icons/bi";
import { FiUpload } from "react-icons/fi";
import { InboxOutlined, DeleteOutlined } from "@ant-design/icons";
import { Upload, Image } from "antd";
import axios from "axios";
import { toast } from "react-toastify";
import { useNavigate } from "react-router-dom";

import Input from "./Input";
import Dropdown from "./Dropdown";
import Button from "./Button";
import UserDropDown from "./UserDropDown"; // Import UserDropDown component

const { Dragger } = Upload;

type ColumnType = "text" | "image" | "status" | "actions" | "button" | "custom";

interface Column {
  header: string;
  accessor: string;
  type?: ColumnType;
}

export interface User {
  id: string;
  name: string;
  role: string;
  status: string;
  userImage?: string;
  [key: string]: any;
}

interface StoreTableData {
  id: string;
  name: string;
  userImage: string;
  zone: string;
  status: string;
  originalData?: any;
}

interface StoreTableProps {
  columns: Column[];
  data: any[];
  tableTitle?: string;
  rowsPerPageOptions?: number[];
  defaultRowsPerPage?: number;
  searchable?: boolean;
  filterByStatus?: boolean;
  onEdit?: (row: any) => void;
  onDelete?: (row: any) => void;
  tableDataAlignment?: "zone" | "user" | "center"; // Add more if needed
  className?: string;
  onRowClick?: (row: any) => void;
  dealBy?: boolean;
  enableRowModal?: boolean;
  eye?: boolean;
}

const StoreTable: React.FC<StoreTableProps> = ({
  eye,
  enableRowModal = true,
  onRowClick,
  className,
  columns,
  data,
  tableTitle,
  rowsPerPageOptions = [5, 10, 15],
  defaultRowsPerPage = 5,
  searchable = true,
  filterByStatus = true,
  onEdit,
  onDelete,
  tableDataAlignment = "start", // default
  dealBy,
}) => {
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [selectedStore, setSelectedStore] = useState<any>(null); // for modal
  const [deleteStore, setDeleteStore] = useState<any>(null); // for modal
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [deleteModal, setDeleteModal] = useState(false);
  const [search, setSearch] = useState(""); // Local search state
  const [statusFilter, setStatusFilter] = useState("All"); // Status filter state
  const [isEditing, setIsEditing] = useState(false);
  const [editingRow, setEditingRow] = useState<any>(null);
  const [formData, setFormData] = useState<any>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [autoGeneratedId, setAutoGeneratedId] = useState("");
  const [storeLogo, setStoreLogo] = useState<any>(null);
  const [storeLogoStatus, setStoreLogoStatus] = useState("");
  const [storeImage, setStoreImage] = useState<any[]>([]);
  const [storeImageStatus, setStoreImageStatus] = useState("");
  const [prefixData, setPrefixData] = useState<any[]>([]);
  const [isDeleting, setIsDeleting] = useState(false);

  const navigate = useNavigate();

  // Helper function to get auth token
  const getAuthToken = () => {
    let token = localStorage.getItem("token");
    if (!token) {
      token = sessionStorage.getItem("token");
    }
    return token;
  };

  // This useEffect is no longer needed since we're calling fetchStoreDetails directly
  // We can either remove it or keep it as a backup
  useEffect(() => {
    // This will only run on initial mount or when editingRow changes to a different object reference
    if (editingRow && !isEditing) {
      fetchStoreDetails(editingRow.storeId);
    }
  }, [editingRow, isEditing]);

  const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
  const fetchStoreDetails = async (storeId: string) => {
    try {
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const response = await axios.get(
        `${API_URL}/api/abid-jewelry-ms/getOneShop/${storeId}`,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data && response.data.data) {
        const storeData = response.data.data;
        console.log("Fetched store data:", storeData);

        // Extract manager name from the response
        let managerName = "";
        if (storeData.managerId && typeof storeData.managerId === "object") {
          // If managerId is populated with user object
          const firstName = storeData.managerId.firstName || "";
          const lastName = storeData.managerId.lastName || "";
          managerName = `${firstName} ${lastName}`.trim();
        }

        setFormData({
          id: storeData._id,
          autoGenerated: storeData.autoGenerated,
          storeName: storeData.storeName,
          location: storeData.location,
          phoneNumber: storeData.phoneNumber,
          email: storeData.email,
          status: storeData.status,
          facebookLink: storeData.socialMediaLinks?.[0] || "",
          instagramLink: storeData.socialMediaLinks?.[1] || "",
          linkedinLink: storeData.socialMediaLinks?.[2] || "",
          // Make sure these are strings, not objects
          prefixId: storeData.prefixId?._id || "",
          managerId: storeData.managerId?._id || storeData.managerId || "",
          managerName: managerName || "No Manager Assigned", // Set the full name for display
        });

        // Set store logo if exists
        if (storeData.storeLogo) {
          console.log("Setting store logo:", storeData.storeLogo);
          setStoreLogo({
            uid: "-1",
            name: "Store Logo",
            status: "done",
            url: `${API_URL}${storeData.storeLogo}`,
          });
          setStoreLogoStatus("success");
        } else {
          setStoreLogo(null);
          setStoreLogoStatus("");
        }

        // Set store image if exists
        if (storeData.storeImage) {
          console.log("Setting store image:", storeData.storeImage);
          setStoreImage([
            {
              uid: "-1",
              name: "Store Image",
              status: "done",
              url: `${API_URL}${storeData.storeImage}`,
            },
          ]);
          setStoreImageStatus("success");
        } else {
          setStoreImage([]);
          setStoreImageStatus("");
        }
      }
    } catch (error) {
      console.error("Error fetching store details:", error);
      toast.error("Failed to fetch store details. Please try again later.");
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === "checkbox" ? checked : type === "radio" ? value : value,
    });
  };

  const handlePrefixSelect = (value: string) => {
    const selectedPrefix = prefixData.find((prefix) => prefix.name === value);
    if (selectedPrefix) {
      setFormData({
        ...formData,
        prefixId: selectedPrefix.id,
      });
    }
  };

  // Handle user selection from dropdown
  const handleUserSelect = (userId: string, userName: string) => {
    setFormData({
      ...formData,
      managerId: userId,
      managerName: userName, // Store manager name for display
    });
  };

  const handleRemoveLogo = () => {
    setStoreLogo(null);
    setStoreLogoStatus("");
  };

  const storeLogoProps = {
    name: "file",
    multiple: false,
    maxCount: 1,
    accept: "image/png,image/jpeg",
    beforeUpload: (file: any) => {
      const isPNG = file.type === "image/png" || file.type === "image/jpeg";
      if (!isPNG) {
        toast.error("You can only upload PNG or JPG files!");
        return Upload.LIST_IGNORE;
      }
      const isLt5M = file.size / 1024 / 1024 < 5;
      if (!isLt5M) {
        toast.error("Image must be smaller than 5MB!");
        return Upload.LIST_IGNORE;
      }

      // Create a preview URL for the file
      const fileWithPreview = {
        uid: `-${Date.now()}`,
        name: file.name,
        status: "done",
        url: URL.createObjectURL(file),
        originFileObj: file,
      };

      setStoreLogo(fileWithPreview);
      setStoreLogoStatus("success");
      return false;
    },
    onRemove: () => {
      setStoreLogo(null);
      setStoreLogoStatus("");
    },
    // fileList: storeLogo ? [storeLogo] : [],
  };

  const storeImageProps = {
    name: "file",
    multiple: false,
    maxCount: 1,
    accept: "image/png,image/jpeg",
    beforeUpload: (file: any) => {
      const isPNG = file.type === "image/png" || file.type === "image/jpeg";
      if (!isPNG) {
        toast.error("You can only upload PNG or JPG files!");
        return Upload.LIST_IGNORE;
      }
      const isLt5M = file.size / 1024 / 1024 < 5;
      if (!isLt5M) {
        toast.error("Image must be smaller than 5MB!");
        return Upload.LIST_IGNORE;
      }

      // Create a preview URL for the file
      const fileWithPreview = {
        uid: `-${Date.now()}`,
        name: file.name,
        status: "done",
        url: URL.createObjectURL(file),
        originFileObj: file,
      };

      setStoreImage([fileWithPreview]);
      setStoreImageStatus("success");
      return false;
    },
    onRemove: () => {
      setStoreImage([]);
      setStoreImageStatus("");
    },
    fileList: storeImage,
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      setIsSubmitting(true);

      const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      // Create form data for file upload
      const formDataToSend = new FormData();
      formDataToSend.append("storeName", formData.storeName);
      formDataToSend.append("location", formData.location);
      formDataToSend.append("phoneNumber", formData.phoneNumber);
      formDataToSend.append("email", formData.email);
      formDataToSend.append("status", formData.status);

      // Add social media links individually
      if (formData.facebookLink) {
        formDataToSend.append("socialMediaLinks[]", formData.facebookLink);
      }

      if (formData.instagramLink) {
        formDataToSend.append("socialMediaLinks[]", formData.instagramLink);
      }

      if (formData.linkedinLink) {
        formDataToSend.append("socialMediaLinks[]", formData.linkedinLink);
      }

      // Only add prefixId if it's a string (valid ObjectId)
      if (formData.prefixId && typeof formData.prefixId === "string") {
        formDataToSend.append("prefixId", formData.prefixId);
      }

      // Only add managerId if it's a string (valid ObjectId)
      if (formData.managerId && typeof formData.managerId === "string") {
        formDataToSend.append("managerId", formData.managerId);
      }

      // Add files if they exist - IMPORTANT: Use the correct field names expected by your API
      if (storeLogo) {
        if (storeLogo.originFileObj) {
          // This is a new file upload
          formDataToSend.append("storeLogo", storeLogo.originFileObj);
          console.log(
            "Uploading new store logo:",
            storeLogo.originFileObj.name
          );
        }
      }

      if (storeImage.length > 0) {
        if (storeImage[0].originFileObj) {
          // This is a new file upload
          formDataToSend.append("storeImage", storeImage[0].originFileObj);
          console.log(
            "Uploading new store image:",
            storeImage[0].originFileObj.name
          );
        }
      }

      // Log the form data for debugging
      for (const [key, value] of formDataToSend.entries()) {
        console.log(`${key}: ${value instanceof File ? value.name : value}`);
      }

      const response = await axios.put(
        `${API_URL}/api/abid-jewelry-ms/updateShop/${formData.id}`,
        formDataToSend,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "multipart/form-data",
          },
        }
      );

      if (response.data && response.data.success) {
        toast.success("Store updated successfully!");
        setIsEditing(false);

        // Notify parent component to refresh data instead of reloading page
        if (onEdit) {
          onEdit(null);
        }
      } else {
        toast.error(response.data.message || "Failed to update store.");
      }
    } catch (error: any) {
      console.error("Error updating store:", error);
      toast.error(
        error.response?.data?.message ||
          "Failed to update store. Please try again later."
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDeleteStore = async () => {
    if (!deleteStore || !deleteStore.id) return;

    try {
      setIsDeleting(true);

      const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const response = await axios.delete(
        `${API_URL}/api/abid-jewelry-ms/deleteShop/${deleteStore.storeId}`,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data && response.data.success) {
        toast.success("Store deleted successfully!");
        setShowDeleteModal(false);
        setDeleteModal(true);

        // Notify parent component to refresh data instead of reloading page
        if (onDelete) {
          setTimeout(() => {
            setDeleteModal(false);
            onDelete(null);
          }, 1500);
        }
      } else {
        toast.error(response.data.message || "Failed to delete store.");
      }
    } catch (error: any) {
      console.error("Error deleting store:", error);
      toast.error(
        error.response?.data?.message ||
          "Failed to delete store. Please try again later."
      );
    } finally {
      setIsDeleting(false);
    }
  };
  console.log("formData", formData);

  const filteredData = data.filter((item) => {
    // Only search in name and id fields
    const nameMatch =
      item.name?.toLowerCase().includes(search.toLowerCase()) || false;
    const idMatch =
      item.id?.toLowerCase().includes(search.toLowerCase()) || false;

    const matchesSearch = nameMatch || idMatch;
    const matchesStatus =
      statusFilter === "All" || item.status === statusFilter;

    return matchesSearch && matchesStatus;
  });

  const totalPages = Math.ceil(filteredData.length / rowsPerPage);
  const currentData = filteredData.slice(
    (currentPage - 1) * rowsPerPage,
    currentPage * rowsPerPage
  );

  const handleChangePage = (page: number) => {
    if (page >= 1 && page <= totalPages) setCurrentPage(page);
  };

  return (
    <>
      <div
        className={`bg-white rounded-xl p-4 flex flex-col gap-5 overflow-hidden shadow-md ${className}`}
      >
        {/* Search + Filter */}
        <div
          className={`grid gap-4 items-center justify-between md:grid-cols-2 ${
            data.some((item) => item.hasOwnProperty("status"))
              ? ""
              : "grid-cols-2"
          }`}
        >
          <div className="flex gap-3">
            {searchable && (
              <Input
                placeholder="Search Store name, ID"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className="max-w-full sm:max-w-2xl !rounded-3xl outline-none "
              />
            )}

            {filterByStatus &&
              data.some((item) => item.hasOwnProperty("status")) && (
                <Dropdown
                  options={["All", "Active", "Inactive"]}
                  DropDownName="Status"
                  defaultValue="All"
                  onSelect={(val) => {
                    setStatusFilter(val);
                    setCurrentPage(1);
                  }}
                />
              )}
          </div>
          <div
            className={`flex md:justify-end ${
              data.some((item) => item.hasOwnProperty("status"))
                ? "justify-start"
                : "justify-end"
            }`}
          >
            <Button
              text="Export"
              variant="border"
              className="bg-[#5D6679] text-white w-24"
            />
          </div>
        </div>

        <p className="text-[#056BB7] font-semibold text-[24px]">{tableTitle}</p>
      </div>

      <div
        className={`flex flex-col ${
          dealBy ? "md:flex-col gap-3" : "md:flex-row"
        } items-center justify-between px-4 py-4`}
      >
        <div className="flex items-center justify-center gap-2">
          <button
            onClick={() => handleChangePage(currentPage - 1)}
            className="w-10 h-10 rounded-full border border-gray-300 hover:bg-gray-200 flex items-center justify-center"
            disabled={currentPage === 1}
          >
            <GoChevronLeft size={18} />
          </button>

          {/* Always show page 1 */}
          <button
            onClick={() => handleChangePage(1)}
            className={`w-8 h-8 rounded-full text-sm flex items-center justify-center transition ${
              currentPage === 1
                ? "bg-[#407BFF] text-white"
                : "bg-[#E5E7EB] text-black hover:bg-[#407BFF] hover:text-white"
            }`}
          >
            1
          </button>

          {/* Show dots if current page is far from start */}
          {currentPage > 3 && (
            <div>
              <span className="text-gray-500 px-0.5">•</span>
              <span className="text-gray-500 px-0.5">•</span>
              <span className="text-gray-500 px-0.5">•</span>
            </div>
          )}

          {/* Show current page and surrounding pages (but not 1 or last page) */}
          {[currentPage - 1, currentPage, currentPage + 1]
            .filter((page) => page > 1 && page < totalPages && page >= 1)
            .map((num) => (
              <button
                key={num}
                onClick={() => handleChangePage(num)}
                className={`w-8 h-8 rounded-full text-sm flex items-center justify-center transition ${
                  currentPage === num
                    ? "bg-[#407BFF] text-white"
                    : "bg-[#E5E7EB] text-black hover:bg-[#407BFF] hover:text-white"
                }`}
              >
                {num}
              </button>
            ))}

          {/* Show dots if current page is far from end */}
          {currentPage < totalPages - 2 && totalPages > 1 && (
            <div>
              <span className="text-gray-500 px-0.5">•</span>
              <span className="text-gray-500 px-0.5">•</span>
              <span className="text-gray-500 px-0.5">•</span>
            </div>
          )}

          {/* Always show last page (if more than 1 page) */}
          {totalPages > 1 && (
            <button
              onClick={() => handleChangePage(totalPages)}
              className={`w-8 h-8 rounded-full text-sm flex items-center justify-center transition ${
                currentPage === totalPages
                  ? "bg-[#407BFF] text-white"
                  : "bg-[#E5E7EB] text-black hover:bg-[#407BFF] hover:text-white"
              }`}
            >
              {totalPages}
            </button>
          )}

          <button
            onClick={() => handleChangePage(currentPage + 1)}
            className="w-10 h-10 rounded-full border border-gray-300 hover:bg-gray-200 flex items-center justify-center"
            disabled={currentPage === totalPages}
          >
            <GoChevronRight size={18} />
          </button>
        </div>

        <div className="flex items-center gap-2 mt-2 md:mt-0">
          <span className="text-sm">Show:</span>
          <Dropdown
            options={["10 Row", "15 Row", "20 Row", "25 Row", "All"]}
            defaultValue="10 Row"
            onSelect={(val) => {
              if (val === "All") {
                setRowsPerPage(filteredData.length || data.length);
              } else {
                const selected = Number.parseInt(val.split(" ")[0]);
                setRowsPerPage(selected);
              }
              setCurrentPage(1);
            }}
            className="bg-black text-white rounded px-2 py-1 min-w-[90px]"
          />
        </div>
      </div>

      {/* Store Detail Modal */}
      {selectedStore && (
        <div
          className="fixed inset-0 flex items-center justify-center bg-black/20 z-50"
          onClick={() => setSelectedStore(null)}
        >
          <div
            className="animate-scaleIn bg-white rounded-[7px] p-6 w-full max-w-sm mx-auto relative shadow-md transition-opacity duration-300"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex justify-between items-center">
              <h2 className="text-lg font-semibold">Store Details</h2>
              <button
                onClick={() => setSelectedStore(null)}
                className="text-xl font-bold text-gray-500 hover:text-gray-700"
              >
                ×
              </button>
            </div>
            <div className="text-center">
              <div className="mt-3 w-full flex">
                <span
                  className={`text-sm px-3 py-1 rounded-md ml-auto ${
                    selectedStore.status.toLowerCase() === "active"
                      ? "text-[#10A760] bg-[#34C75933]"
                      : "text-red-600 bg-red-100"
                  }`}
                >
                  {selectedStore.status}
                </span>
              </div>
              <img
                src={selectedStore.userImage || "/placeholder.svg"}
                alt={selectedStore.name}
                className="w-36 h-36 mx-auto rounded-full object-cover"
              />
              <div className="my-5"></div>
              <h3 className="text-xl font-bold mt-1">
                {selectedStore.name} ({selectedStore.id})
              </h3>
              <div className="mt-2 text-black text-sm font-bold">
                {selectedStore.zone || "No Zone Assigned"}
              </div>
              <div className="flex justify-center gap-6 text-[#71717A] mt-2">
                <p>{selectedStore.email || "No Email"}</p>
                <p>{selectedStore.phoneNumber || "No Phone"}</p>
              </div>
              <p className="text-[#71717A] italic">
                {selectedStore.location || "No Address"}
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && (
        <div
          className="fixed inset-0 flex items-center justify-center bg-black/20 z-50"
          onClick={() => {
            setShowDeleteModal(false);
            setDeleteStore(null);
          }}
        >
          <div
            className="animate-scaleIn bg-white rounded-xl w-full max-w-md relative shadow-lg border-3 border-gray-300"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex justify-between items-center py-4 px-6 shadow-[0_2px_2px_0_#00000026]">
              <h2 className="text-xl font-medium">
                Delete {deleteStore?.name}
              </h2>
              <button
                onClick={() => setShowDeleteModal(false)}
                className="text-xl font-bold text-gray-500 hover:text-gray-700"
              >
                ×
              </button>
            </div>
            <div className="mt-8 text-start pb-8 px-6 shadow-[0_2px_2px_0_#00000026]">
              <h3 className="text-lg font-semibold mb-1">Delete Store?</h3>
              <p className="text-sm text-gray-700">
                Are you sure you want to delete this store?
              </p>
              <p className="text-sm text-red-600 font-medium mt-1">
                This action cannot be undone.
              </p>
            </div>

            <div className="flex justify-center gap-2 pb-3 py-4 px-6 shadow-[0_2px_2px_0_#00000026]">
              <button
                onClick={() => setShowDeleteModal(false)}
                className="px-5 py-1 rounded-md hover:bg-gray-100 border-none shadow-[inset_0_0_4px_#00000026]"
              >
                Cancel
              </button>
              <Button
                text={isDeleting ? "Deleting..." : "Delete"}
                icon={<AiOutlineDelete />}
                onClick={handleDeleteStore}
                disabled={isDeleting}
                className="!border-none px-5 py-1 bg-[#DC2626] hover:bg-red-700 text-white rounded-md flex items-center gap-1"
              />
            </div>
          </div>
        </div>
      )}

      {/* Edit Store Modal */}
      {isEditing && (
        <div
          className="fixed inset-0 flex items-center justify-center bg-black/20 z-50"
          onClick={() => setIsEditing(false)}
        >
          <div
            className="animate-scaleIn md:mx-12 xl:mx-0 bg-white w-md sm:w-[80vw] md:w-2xl lg:w-4xl xl:w-5xl h-[90vh] rounded-[7px] p-6 shadow-lg relative overflow-y-auto"
            onClick={(e) => e.stopPropagation()}
          >
            <form onSubmit={handleSubmit}>
              <div>
                {/* Top Side */}
                <div className="flex justify-between items-center">
                  <p className="Source-Sans-Pro-font text-[#056BB7] font-semibold text-[24px] m-0">
                    Edit Store
                  </p>
                  <button
                    type="button"
                    onClick={() => setIsEditing(false)}
                    className="text-xl font-bold text-gray-500 hover:text-gray-700"
                  >
                    ×
                  </button>
                </div>
                <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-8 md:gap-12 lg:gap-16 xl:gap-32 text-[15px] Poppins-font font-medium">
                  {/* Left Side */}
                  <div className="space-y-4">
                    <div className="flex flex-col">
                      <label htmlFor="" className="mb-1">
                        Store ID
                      </label>
                      <input
                        type="text"
                        id="storeId"
                        value={formData?.id || ""}
                        readOnly
                        className="w-full px-4 py-2 text-sm text-gray-700 placeholder-gray-400 border border-gray-300 outline-none rounded-md bg-gray-100"
                      />
                    </div>
                    <div className="flex flex-col">
                      <label htmlFor="storeName" className="mb-1">
                        Store Name
                      </label>
                      <Input
                        name="storeName"
                        placeholder="Store Name"
                        className="outline-none focus:outline-none w-full"
                        value={formData?.storeName || ""}
                        onChange={handleInputChange}
                      />
                    </div>

                    <div className="flex flex-col">
                      <label htmlFor="location" className="mb-1">
                        Location
                      </label>
                      <Input
                        name="location"
                        placeholder="Street, City, State, Zip Code, Country"
                        className="outline-none focus:outline-none w-full"
                        value={formData?.location || ""}
                        onChange={handleInputChange}
                      />
                    </div>

                    {/* Add Manager Field */}
                    <div className="flex flex-col">
                      <label htmlFor="managerName" className="mb-1">
                        Manager
                      </label>
                      {/* Add Manager Field */}
                      <div className="flex flex-col">
                        <UserDropDown
                          className="outline-none focus:outline-none w-full"
                          onSelect={handleUserSelect}
                          defaultValue={
                            formData?.managerName || "Select Manager"
                          }
                          // selectedUserId={formData?.managerId}
                          key={formData?.managerId} // Add key to force re-render when managerId changes
                        />
                      </div>
                    </div>

                    <div className="flex flex-col">
                      <label htmlFor="phoneNumber" className="mb-1">
                        Phone No
                      </label>
                      <Input
                        name="phoneNumber"
                        placeholder="+56 362738233"
                        className="outline-none focus:outline-none w-full"
                        value={formData?.phoneNumber || ""}
                        onChange={handleInputChange}
                      />
                    </div>
                    <div className="flex flex-col">
                      <label htmlFor="email" className="mb-1">
                        Email
                      </label>
                      <Input
                        name="email"
                        placeholder="john@example.com"
                        className="outline-none focus:outline-none w-full"
                        value={formData?.email || ""}
                        onChange={handleInputChange}
                      />
                    </div>
                    <div className="flex flex-col">
                      <div>
                        <span className="text-sm font-medium">Status</span>
                      </div>
                      <div className="flex gap-4">
                        <label className="flex items-center gap-2 text-sm border px-3 py-2 border-gray-200 rounded-md">
                          <input
                            type="radio"
                            name="status"
                            value="active"
                            className="accent-blue-600"
                            checked={formData?.status === "active"}
                            onChange={handleInputChange}
                          />
                          Active
                        </label>
                        <label className="flex items-center gap-2 text-sm border px-2 py-2 border-gray-200 rounded-md">
                          <input
                            type="radio"
                            name="status"
                            value="inactive"
                            className="accent-blue-600"
                            checked={formData?.status === "inactive"}
                            onChange={handleInputChange}
                          />
                          Inactive
                        </label>
                      </div>
                    </div>
                  </div>

                  {/* Right Side */}
                  <div className="space-y-4">
                    <div className="flex flex-col gap-2">
                      <label htmlFor="" className="">
                        Social media links
                      </label>
                      <Input
                        name="facebookLink"
                        icon={
                          <FaFacebook className="text-gray-400" size={20} />
                        }
                        placeholder="facebook link"
                        className="outline-none focus:outline-none w-full"
                        value={formData?.facebookLink || ""}
                        onChange={handleInputChange}
                      />
                      <Input
                        name="instagramLink"
                        icon={
                          <AiFillInstagram
                            className="text-gray-400"
                            size={22}
                          />
                        }
                        placeholder="instagram link"
                        className="outline-none focus:outline-none w-full"
                        value={formData?.instagramLink || ""}
                        onChange={handleInputChange}
                      />
                      <Input
                        name="linkedinLink"
                        icon={
                          <BiLogoLinkedinSquare
                            className="text-gray-400"
                            size={22}
                          />
                        }
                        placeholder="linkedin link"
                        className="outline-none focus:outline-none w-full"
                        value={formData?.linkedinLink || ""}
                        onChange={handleInputChange}
                      />
                    </div>

                    <div className="w-full">
                      <label className="block mb-2 font-medium w-full">
                        Store Logo
                      </label>

                      <Dragger
                        {...storeLogoProps}
                        className="w-full"
                        height={40}
                      >
                        <div className="rounded-lg flex items-center justify-between cursor-pointer transition !w-full -mt-2">
                          <span className="text-gray-500">
                            {storeLogo ? storeLogo.name : "Upload a logo image"}
                          </span>
                          <FiUpload className="text-xl text-gray-500" />
                        </div>
                      </Dragger>
                      <span className="text-[#2C8CD4] !text-[12px]">
                        Select a png (5MB) 200X200
                      </span>

                      {storeLogo && (
                        <div className="mt-4 flex items-start justify-between gap-4">
                          <Image
                            width={100}
                            height={100}
                            className="border border-gray-300"
                            src={
                              storeLogo.thumbUrl ||
                              storeLogo.url ||
                              (storeLogo.originFileObj
                                ? URL.createObjectURL(storeLogo.originFileObj)
                                : "")
                            }
                            alt={storeLogo.name}
                            style={{ objectFit: "cover", borderRadius: "8px" }}
                          />
                          <div className="flex items-center gap-2">
                            <p
                              className={`font-medium ${
                                storeLogoStatus === "success"
                                  ? "text-green-600"
                                  : storeLogoStatus === "error"
                                  ? "text-red-600"
                                  : "text-gray-500"
                              }`}
                            >
                              Status: {storeLogoStatus || "current"}
                            </p>
                            <DeleteOutlined
                              onClick={handleRemoveLogo}
                              className="text-red-500 text-lg cursor-pointer hover:text-red-700"
                            />
                          </div>
                        </div>
                      )}
                    </div>

                    <div className="flex flex-col">
                      <label htmlFor="" className="mb-1">
                        Store Image
                      </label>
                      <Dragger
                        {...storeImageProps}
                        className="mb-1 w-full"
                        height={170}
                      >
                        <p className="ant-upload-drag-icon">
                          <InboxOutlined />
                        </p>
                        <p className="ant-upload-text">
                          Drag and Drop a file here
                        </p>
                        <p className="ant-upload-hint !text-[#1A8CE0]">
                          or Browse Images
                        </p>
                      </Dragger>
                      {storeImage.length > 0 && (
                        <div className="mt-2">
                          <p
                            className={`font-medium ${
                              storeImageStatus === "success"
                                ? "text-green-600"
                                : storeImageStatus === "error"
                                ? "text-red-600"
                                : "text-gray-500"
                            }`}
                          >
                            {storeImage.length} file(s) uploaded
                          </p>
                          <div className="flex flex-wrap gap-2 mt-2">
                            {storeImage.map((img, index) => (
                              <div key={index} className="relative">
                                <Image
                                  width={80}
                                  height={80}
                                  className="border border-gray-300 rounded-md"
                                  src={
                                    img.thumbUrl ||
                                    img.url ||
                                    (img.originFileObj
                                      ? URL.createObjectURL(img.originFileObj)
                                      : "")
                                  }
                                  alt={`Store Image ${index + 1}`}
                                />
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>

                    <div className="flex justify-end gap-4 Poppins-font font-medium mt-6">
                      <Button
                        text="Cancel"
                        type="button"
                        onClick={() => setIsEditing(false)}
                        className="px-6 !bg-[#F4F4F5] !border-none"
                      />
                      <Button
                        text={isSubmitting ? "Saving..." : "Save Changes"}
                        type="submit"
                        disabled={isSubmitting}
                        className="px-6 !bg-[#056BB7] border-none text-white"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Delete Success Modal */}
      {deleteModal && (
        <div
          className="fixed inset-0 flex items-center justify-center bg-black/20 z-50"
          onClick={() => setDeleteModal(false)}
        >
          <div
            className="animate-scaleIn bg-white rounded-xl w-full max-w-md relative shadow-lg border-3 border-gray-300"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex justify-between items-center py-4 px-6 shadow-[0_2px_2px_0_#00000026]">
              <h2 className="text-xl font-medium">
                Delete {deleteStore?.name}
              </h2>
              <button
                onClick={() => setDeleteModal(false)}
                className="text-xl font-bold text-gray-500 hover:text-gray-700"
              >
                ×
              </button>
            </div>
            {/* Body */}
            <div className="mt-8 text-start pb-8 px-6 shadow-[0_2px_2px_0_#00000026]">
              <h3 className="text-lg font-semibold mb-1">Store Deleted</h3>
              <p className="text-sm text-gray-700">
                The store has been successfully removed.
              </p>
            </div>
            <div className="flex justify-center gap-2 pb-3 py-4 px-6 shadow-[0_2px_2px_0_#00000026]">
              <Button
                text="Close"
                onClick={() => setDeleteModal(false)}
                className="px-5 py-1 rounded-md hover:bg-gray-100 border-none shadow-[inset_0_0_4px_#00000026]"
              />
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default StoreTable;
