// import Input from "../../../components/Input";
// import Button from "../../../components/Button";
// import React from "react";
// import { IoIosSearch } from "react-icons/io";
// import chain from "../../../assets/tops.png";
// import braclet from "../../../assets/bracelet.png";
// import noseRing from "../../../assets/noseRing.png";
// import earing from "../../../assets/earing.png";
// import ring from "../../../assets/ring.png";
// import locket from "../../../assets/locket.png";
// import LiveInventoryTable from "../../../components/LiveInventoryTable";

// interface Column {
//   header: string;
//   accessor: string;
//   type?: "text" | "image" | "status" | "actions";
// }
// const LiveInventory: React.FC = () => {
//   const columns: Column[] = [
//     { header: "S.No", accessor: "sno" },
//     { header: "Image", accessor: "image", type: "image" },
//     { header: "Barcode", accessor: "barcode" },
//     { header: "Product For", accessor: "productFor" },
//     { header: "Category", accessor: "category" },
//     { header: "Sub Category", accessor: "subCategory" },
//     { header: "Stock", accessor: "stock" },
//     { header: "Location", accessor: "location" },
//     { header: "Actions", accessor: "actions", type: "actions" },
//   ];

//   const userData = [
//     {
//       sno: "01",
//       //   name: "Matthew Wilson",
//       userImage: chain,
//       barcode: "67643875",
//       productFor: "Male",
//       category: "Necklace",
//       subCategory: "Eternal Glow",
//       stock: "05",
//       location: "Store",
//     },
//     {
//       sno: "01",
//       //   name: "Emily Thompson",
//       userImage: braclet,
//       barcode: "67643875",
//       productFor: "Female",
//       category: "Ring",
//       subCategory: "Aurora Spark",
//       stock: "100",
//       location: "Head Office",
//     },
//     {
//       sno: "01",
//       //   name: "Nicholas Young",
//       userImage: noseRing,
//       barcode: "67643875",
//       productFor: "Unisex",
//       category: "Bracelet",
//       subCategory: "Caleste Curve",
//       stock: "49",
//       location: "Store",
//     },
//     {
//       sno: "01",
//       //   name: "Sarah Martinez",
//       userImage: earing,
//       barcode: "67643875",
//       productFor: "Kids",
//       category: "Earings",
//       subCategory: "Velvet Halo",
//       stock: "53",
//       location: "Head Office",
//     },
//     {
//       sno: "01",
//       //   name: "Olivia Bennett",
//       userImage: ring,
//       barcode: "67643875",
//       productFor: "Male",
//       category: "Pendant",
//       subCategory: "Twilight Bloom",
//       stock: "64",
//       location: "Store",
//     },
//     {
//       sno: "01",
//       //   name: "Jason Brown",
//       userImage: locket,
//       barcode: "67643875",
//       productFor: "Unisexs",
//       category: "Bangle",
//       subCategory: "Ivy twist",
//       stock: "53",
//       location: "Store",
//     },
//   ];
//   return (
//     <div className="w-full mx-auto px-3 py-6 sm:px-4 md:px-6 xl:px-8 xl:py-6 h-auto">
//       <div className="bg-white rounded-lg shadow-md px-4 md:px-10 py-6 !h-auto">
//         <p className="Source-Sans-Pro-font font-semibold text-[24px] mb-2">
//           Live Inventory:
//         </p>

//         <Input
//           placeholder="Search Product Tag"
//           icon={<IoIosSearch className="text-gray-500" />}
//           iconPosition="left"
//           className="!rounded-3xl outline-none md:w-[300px]"
//         />
//         <LiveInventoryTable
//           columns={columns}
//           data={userData}
//           eye={true}
//           tableDataAlignment="zone"
//         />
//       </div>
//     </div>
//   );
// };

// export default LiveInventory;



"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { IoIosSearch, IoMdClose } from "react-icons/io"
import LiveInventoryTable from "../../../components/LiveInventoryTable"
import { toast } from "react-toastify"
import axios from "axios"

interface Column {
  header: string
  accessor: string
  type?: "text" | "image" | "status" | "actions"
}

interface InventoryItem {
  _id: string
  itemId: {
    _id: string
    prefixId: {
      prefixName: string
    }
    autoGenerated: string
    barcode: string
    productFor: string[]
    category: {
      name: string
    }
    subCategory: {
      name: string
    }
    searchTag: string
    itemImage: string
  }
  stock: number
  headOffice: number
  store: number
  headOfficeAging: string
  storeAging: string
  dateAdded: string
}

interface ApiResponse {
  success: boolean
  data: InventoryItem[]
  totals: {
    totalInventory: number
    totalHeadOffice: number
    totalStore: number
  }
}

const getAuthToken = () => {
  let token = localStorage.getItem("token")
  if (!token) {
    token = sessionStorage.getItem("token")
  }
  return token
}

const LiveInventory: React.FC = () => {
  const [inventoryData, setInventoryData] = useState<InventoryItem[]>([])
  const [filteredData, setFilteredData] = useState<InventoryItem[]>([])
  const [loading, setLoading] = useState(false)
  const [searchInput, setSearchInput] = useState("")
  const [activeSearchTags, setActiveSearchTags] = useState<string[]>([])
  const [totals, setTotals] = useState({
    totalInventory: 0,
    totalHeadOffice: 0,
    totalStore: 0,
  })

  const columns: Column[] = [
    { header: "S.No", accessor: "sno" },
    { header: "Image", accessor: "image", type: "image" },
    { header: "Barcode", accessor: "barcode" },
    { header: "Product For", accessor: "productFor" },
    { header: "Category", accessor: "category" },
    { header: "Sub Category", accessor: "subCategory" },
    { header: "Stock", accessor: "stock" },
    { header: "Headoffice", accessor: "headoffice" },
    { header: "Store", accessor: "store" },
    { header: "Actions", accessor: "actions", type: "actions" },
  ]

  // Fetch inventory data from API
  const fetchInventoryData = async () => {
    setLoading(true)
    try {
      const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000"
      const token = getAuthToken()

      if (!token) {
        toast.error("Authentication token not found. Please login again.")
        return
      }

      const response = await axios.get<ApiResponse>(`${API_URL}/api/abid-jewelry-ms/inventory`, {
        headers: {
          "x-access-token": token,
          "Content-Type": "application/json",
        },
      })

      if (response.data.success) {
        setInventoryData(response.data.data)
        setFilteredData(response.data.data)
        setTotals(response.data.totals)
      } else {
        toast.error("Failed to fetch inventory data")
      }
    } catch (error) {
      console.error("Error fetching inventory data:", error)
      toast.error("Failed to fetch inventory data")
    } finally {
      setLoading(false)
    }
  }

  // Transform API data to table format
  const transformDataForTable = (data: InventoryItem[]) => {
    return data.map((item, index) => ({
      id: item._id,
      sno: String(index + 1).padStart(2, "0"),
      image: item?.itemId?.itemImage
        ? `${import.meta.env.VITE_BASE_URL || "http://localhost:9000"}${item?.itemId?.itemImage}`
        : "",
      barcode: item?.itemId?.barcode,
      productFor: item?.itemId?.productFor?.join(", "),
      category: item?.itemId?.category?.name,
      subCategory: item?.itemId?.subCategory?.name,
      stock: item?.stock,
      headoffice: item?.headOffice,
      store: item?.store,
      headOfficeAging: item?.headOfficeAging,
      storeAging: item?.storeAging,
      searchTags: item?.itemId?.searchTag,
      originalData: item, // Keep original data for modal
    }))
  }

  // Handle search functionality
  const handleSearch = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter" && searchInput.trim()) {
      const searchTerm = searchInput.trim().toLowerCase()

      // Add to active search tags if not already present
      if (!activeSearchTags.includes(searchTerm)) {
        setActiveSearchTags((prev) => [...prev, searchTerm])
      }

      // Filter data based on search tags
      filterDataBySearchTags([...activeSearchTags, searchTerm])
      setSearchInput("")
    }
  }

  // Filter data based on active search tags
  const filterDataBySearchTags = (tags: string[]) => {
    if (tags.length === 0) {
      setFilteredData(inventoryData)
      return
    }

    const filtered = inventoryData.filter((item) => {
      const searchTags = item.itemId.searchTag
        .toLowerCase()
        .split(",")
        .map((tag) => tag.trim())
      return tags.some((tag) => searchTags.some((searchTag) => searchTag.includes(tag.toLowerCase())))
    })

    setFilteredData(filtered)
  }

  // Remove search tag
  const removeSearchTag = (tagToRemove: string) => {
    const updatedTags = activeSearchTags.filter((tag) => tag !== tagToRemove)
    setActiveSearchTags(updatedTags)
    filterDataBySearchTags(updatedTags)
  }

  // Clear all search tags
  const clearAllSearchTags = () => {
    setActiveSearchTags([])
    setFilteredData(inventoryData)
  }

  useEffect(() => {
    fetchInventoryData()
  }, [])

  return (
    <div className="w-full mx-auto px-3 py-6 sm:px-4 md:px-6 xl:px-8 xl:py-6 h-auto">
      <div className="bg-white rounded-lg shadow-md px-4 md:px-5 py-6 !h-auto">
        <p className="font-semibold text-[24px] mb-4">Live Inventory:</p>

        {/* Search Section */}
        <div className="flex justify-between flex-col md:flex-row gap-4 mb-6">
          {/* Search Input */}
          <div className="relative md:w-[400px]">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <IoIosSearch className="text-gray-500" size={20} />
            </div>
            <input
              type="text"
              placeholder="Search by search tag"
              value={searchInput}
              onChange={(e) => setSearchInput(e.target.value)}
              onKeyDown={handleSearch}
              className="w-auto pl-10 pr-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
            />
          </div>

          {/* Active Search Tags */}
          <div className="flex flex-wrap gap-2 items-center">
            {activeSearchTags.map((tag, index) => (
              <div
                key={index}
                className="flex items-center gap-1 bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm"
              >
                <span>{tag}</span>
                <button onClick={() => removeSearchTag(tag)} className="hover:text-red-500">
                  <IoMdClose size={14} />
                </button>
              </div>
            ))}
            {activeSearchTags.length > 0 && (
              <button onClick={clearAllSearchTags} className="text-red-500 text-sm hover:underline">
                Clear All
              </button>
            )}
          </div>
        </div>

        {/* Summary Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div className="bg-blue-50 p-4 rounded-lg">
            <h3 className="text-sm font-medium text-blue-600">Total Inventory</h3>
            <p className="text-2xl font-bold text-blue-800">{totals.totalInventory}</p>
          </div>
          <div className="bg-green-50 p-4 rounded-lg">
            <h3 className="text-sm font-medium text-green-600">Head Office</h3>
            <p className="text-2xl font-bold text-green-800">{totals.totalHeadOffice}</p>
          </div>
          <div className="bg-purple-50 p-4 rounded-lg">
            <h3 className="text-sm font-medium text-purple-600">Store</h3>
            <p className="text-2xl font-bold text-purple-800">{totals.totalStore}</p>
          </div>
        </div>

        {/* Table */}
        <LiveInventoryTable
          columns={columns}
          data={transformDataForTable(filteredData)}
          eye={true}
          tableDataAlignment="center"
          loading={loading}
        />
      </div>
    </div>
  )
}

export default LiveInventory
