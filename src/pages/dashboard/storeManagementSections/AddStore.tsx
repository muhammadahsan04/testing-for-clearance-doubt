import React, { useEffect, useState } from "react";
import Input from "../../../components/Input";
import Button from "../../../components/Button";
import AddStoreDropDown from "../../../components/AddStoreDropDown";
import ManagerDropDown from "../../../components/ManagerDropDown";
import plusIcon from "../../../assets/plus.svg";
import { BiLogoLinkedinSquare } from "react-icons/bi";
import type { UploadFile, UploadProps } from "antd";
import { message, Upload, Image } from "antd";
import { DeleteOutlined, InboxOutlined } from "@ant-design/icons";
import { Link, useNavigate } from "react-router-dom";
import { FiUpload } from "react-icons/fi";
import { FaFacebook } from "react-icons/fa";
import { AiFillInstagram } from "react-icons/ai";
import { toast } from "react-toastify";
import axios from "axios";
import PhoneInput from "react-phone-number-input";
import { isValidPhoneNumber } from "react-phone-number-input";
import "react-phone-number-input/style.css";
import { hasPermission } from "../sections/StoreManagement";
import Dropdown from "../../../components/Dropdown";
import { DropImage } from "../../../components/UploadPicture";

// Helper function to get auth token
const getAuthToken = () => {
  let token = localStorage.getItem("token");
  if (!token) {
    token = sessionStorage.getItem("token");
  }
  return token;
};

// getUserRole function add
const getUserRole = () => {
  let role = localStorage.getItem("role");
  if (!role) {
    role = sessionStorage.getItem("role");
  }
  return role;
};

interface Role {
  _id: string;
  name: string;
  description: string;
  roleImage: string;
  createdAt: string;
  updatedAt: string;
  __v: number;
  nameNormalized?: string;
}

// Helper function to get user ID
const getUserId = () => {
  let userId = localStorage.getItem("userId");
  if (!userId) {
    userId = sessionStorage.getItem("userId");
  }
  return userId ? JSON.parse(userId) : null;
};

interface AddUserProps {
  uploadedFile: File | null;
  setUploadedFile: (file: File | null) => void;
}
const AddItem: React.FC<AddUserProps> = ({ uploadedFile, setUploadedFile }) => {
  const navigate = useNavigate();
  const [selectedZones, setSelectedZones] = useState<string[]>([]);
  const [password, setPassword] = useState<string>("");
  const [prefixData, setPrefixData] = useState<any[]>([]);
  const [isLoadingData, setIsLoadingData] = useState<boolean>(false);
  const [selectedPrefix, setSelectedPrefix] = useState<string>("Prefix");
  const [autoGeneratedId, setAutoGeneratedId] = useState<string>("");
  const [prefixIdMap, setPrefixIdMap] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [phoneError, setPhoneError] = useState<string>("");
  const [phoneValue, setPhoneValue] = useState<string | undefined>(undefined);
  const [managerPhoneValue, setManagerPhoneValue] = useState<
    string | undefined
  >(undefined);
  const [isAddManagerModalOpen, setIsAddManagerModalOpen] = useState(false);
  const [roles, setRoles] = useState<Role[]>([]);
  const [managerFormData, setManagerFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    password: "",
    confirmPassword: "",
    role: "",
    status: "active",
  });
  const [selectedRoleName, setSelectedRoleName] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);
  const [managerDropdownKey, setManagerDropdownKey] = useState(0);

  // Form state
  const [formData, setFormData] = useState({
    storeName: "",
    location: "",
    // managerName: "",
    managerId: "",
    phoneNumber: "",
    email: "",
    status: "active",
    facebookLink: "",
    instagramLink: "",
    linkedinLink: "",
    selectedPrefixId: "",
  });

  // Handle phone number change
  const handlePhoneChange = (value: string | undefined) => {
    setPhoneValue(value);
    setPhoneError("");

    if (value) {
      // Validate phone number
      if (!isValidPhoneNumber(value)) {
        setPhoneError("Please enter a valid phone number");
      }

      // Update form data
      setFormData((prev) => ({
        ...prev,
        phoneNumber: value,
      }));
    } else {
      setFormData((prev) => ({
        ...prev,
        phoneNumber: "",
      }));
    }
  };
  // Handle manager phone number change
  const handleMangerPhoneChange = (value: string | undefined) => {
    setManagerPhoneValue(value);
    setPhoneError("");

    if (value) {
      // Validate phone number
      if (!isValidPhoneNumber(value)) {
        setPhoneError("Please enter a valid phone number");
      }

      // Update form data
      setManagerFormData((prev) => ({
        ...prev,
        phone: value, // Changed from phoneNumber to phone
      }));
    } else {
      setManagerFormData((prev) => ({
        ...prev,
        phoneNumber: "",
      }));
    }
  };

  // For store logo
  const [storeLogo, setStoreLogo] = useState<UploadFile | null>(null);
  const [storeLogoStatus, setStoreLogoStatus] = useState<
    "success" | "error" | null
  >(null);

  // For store image
  const [storeImage, setStoreImage] = useState<UploadFile[]>([]);
  const [storeImageStatus, setStoreImageStatus] = useState<
    "success" | "error" | null
  >(null);

  // Permission variables add
  const userRole = getUserRole();
  const isAdmin = userRole === "Admin" || userRole === "SuperAdmin";
  const canCreate = isAdmin || hasPermission("Store Management", "create");

  useEffect(() => {
    if (!canCreate) {
      toast.error("You don't have permission to add store");
    }
  }, [canCreate]);

  // Function to fetch all prefixes
  const fetchPrefixes = async () => {
    setIsLoadingData(true);
    try {
      const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
      const token = getAuthToken();
      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }
      const response = await axios.get(
        `${API_URL}/api/abid-jewelry-ms/getAllStorePrefix`,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "application/json",
          },
        }
      );
      const data = response.data;
      if (data.success && Array.isArray(data.data)) {
        // Map the API response to our table format
        const mappedData = data.data.map((prefix: any) => ({
          id: prefix._id,
          name: prefix.prefixName,
          status: prefix.status || "active",
          _id: prefix._id,
        }));
        setPrefixData(mappedData);
        // toast.success("Prefixes loaded successfully");
      } else {
        toast.warning("No prefixes found or invalid response format");
      }
    } catch (error) {
      console.error("Error fetching prefixes:", error);
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          toast.error("Network error. Please check your internet connection.");
        } else {
          toast.error(
            error.response.data.message || "Failed to fetch prefixes"
          );
        }
      } else {
        toast.error("An unexpected error occurred while fetching prefixes");
      }
    } finally {
      setIsLoadingData(false);
    }
  };

  // Call fetchPrefixes when component mounts
  useEffect(() => {
    fetchPrefixes();
  }, []);

  // Store logo upload props
  const { Dragger } = Upload;
  // Store logo upload props
  const storeLogoProps: UploadProps = {
    name: "file",
    // Remove the action property to prevent auto-upload
    showUploadList: false,
    maxCount: 1,
    beforeUpload: (file) => {
      // Validate file if needed (size, type, etc.)
      const isJpgOrPng =
        file.type === "image/jpeg" || file.type === "image/png";
      if (!isJpgOrPng) {
        message.error("You can only upload JPG/PNG file!");
      }
      const isLt5M = file.size / 1024 / 1024 < 5;
      if (!isLt5M) {
        message.error("Image must be smaller than 5MB!");
      }

      // Set the file in state but prevent upload
      if (isJpgOrPng && isLt5M) {
        setStoreLogo({
          ...file,
          status: "done",
          url: URL.createObjectURL(file),
          thumbUrl: URL.createObjectURL(file),
          originFileObj: file,
        } as UploadFile);
        setStoreLogoStatus("success");
      }

      // Return false to prevent auto upload
      return false;
    },
    onChange(info) {
      // This will still be called but won't trigger uploads
      console.log("Store logo file:", info.file);
    },
  };

  // Similarly for store image props
  const storeImageProps: UploadProps = {
    name: "file",
    multiple: false,
    // Remove the action property
    beforeUpload: (file) => {
      // Validate file if needed
      const isValidFile = file.size / 1024 / 1024 < 5; // Example: 5MB limit
      if (!isValidFile) {
        message.error("File must be smaller than 5MB!");
        return false;
      }

      // Add file to state
      setStoreImage((prev) => {
        const newFile = {
          ...file,
          status: "done",
          url: URL.createObjectURL(file),
          thumbUrl: URL.createObjectURL(file),
          originFileObj: file,
          uid: Date.now().toString(), // Ensure unique ID
        } as UploadFile;

        return [...prev, newFile];
      });
      setStoreImageStatus("success");

      // Return false to prevent auto upload
      return false;
    },
    onRemove: (file) => {
      // Handle file removal
      setStoreImage((prev) => prev.filter((item) => item.uid !== file.uid));
      if (storeImage.length <= 1) {
        setStoreImageStatus(null);
      }
      return true;
    },
    fileList: storeImage,
  };

  const handleRemoveLogo = () => {
    setStoreLogo(null);
    setStoreLogoStatus(null);
  };

  // Handle prefix selection
  const handlePrefixSelect = (value: string) => {
    setSelectedPrefix(value);

    // Find the prefix ID based on the selected prefix name
    const selectedPrefixObj = prefixData.find(
      (prefix) => prefix.name === value
    );
    if (selectedPrefixObj) {
      setFormData((prev) => ({
        ...prev,
        selectedPrefixId: selectedPrefixObj._id,
      }));
    }

    // Check if we already have an ID for this prefix
    if (prefixIdMap[value]) {
      // Use the existing ID for this prefix
      setAutoGeneratedId(prefixIdMap[value]);
    } else {
      // Generate a new ID for this prefix
      const randomNum = Math.floor(100000 + Math.random() * 900000);
      const newId = randomNum.toString();

      // Save the new ID for this prefix
      setPrefixIdMap((prev) => ({
        ...prev,
        [value]: newId,
      }));

      setAutoGeneratedId(newId);
    }
  };

  // Handle user selection from dropdown
  const handleUserSelect = (userId: string, userName: string) => {
    setFormData((prev) => ({
      ...prev,
      managerId: userId,
      // Remove this line - don't store managerName in formData
      // managerName: userName,
    }));
  };

  // Handle input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setManagerFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleStoreInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleStoreStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData((prev) => ({
      ...prev,
      status: e.target.value,
    }));
  };

  // Handle form submission
  // const handleSubmit = async (e: React.FormEvent) => {
  //   e.preventDefault();

  //   if (!formData.selectedPrefixId) {
  //     toast.error("Please select a prefix");
  //     return;
  //   }

  //   if (!autoGeneratedId) {
  //     toast.error("Store ID is required");
  //     return;
  //   }

  //   if (!formData.storeName) {
  //     toast.error("Store name is required");
  //     return;
  //   }

  //   if (!formData.managerId) {
  //     toast.error("Manager selection is required");
  //     return;
  //   }

  //   // Check if store logo is uploaded
  //   if (!storeLogo) {
  //     toast.error("Store logo is required");
  //     return;
  //   }

  //   // Check if store image is uploaded
  //   if (storeImage.length === 0) {
  //     toast.error("Store image is required");
  //     return;
  //   }

  //   setIsSubmitting(true);

  //   try {
  //     const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
  //     const token = getAuthToken();

  //     if (!token) {
  //       toast.error("Authentication token not found. Please login again.");
  //       return;
  //     }

  //     // Prepare social media links array
  //     const socialMediaLinks = [
  //       formData.facebookLink,
  //       formData.instagramLink,
  //       formData.linkedinLink,
  //     ].filter((link) => link !== ""); // Filter out empty links

  //     // Create FormData for file uploads
  //     const formDataToSend = new FormData();

  //     // Append all form fields
  //     formDataToSend.append("prefixId", formData.selectedPrefixId);
  //     formDataToSend.append("autoGenerated", autoGeneratedId);
  //     formDataToSend.append("storeName", formData.storeName);
  //     formDataToSend.append("location", formData.location);
  //     // formDataToSend.append("managerName", formData.managerName);
  //     formDataToSend.append("phoneNumber", formData.phoneNumber);
  //     formDataToSend.append("email", formData.email);
  //     formDataToSend.append("status", formData.status);
  //     formDataToSend.append("managerId", formData.managerId);

  //     // Append social media links
  //     socialMediaLinks.forEach((link, index) => {
  //       formDataToSend.append(`socialMediaLinks[${index}]`, link);
  //     });

  //     // Append files
  //     if (storeLogo && storeLogo.originFileObj) {
  //       formDataToSend.append("storeLogo", storeLogo.originFileObj);
  //     }

  //     storeImage.forEach((file, index) => {
  //       if (file.originFileObj) {
  //         formDataToSend.append("storeImage", file.originFileObj);
  //       }
  //     });

  //     console.log("Submitting data with files");

  //     const response = await axios.post(
  //       `${API_URL}/api/abid-jewelry-ms/createShop`,
  //       formDataToSend,
  //       {
  //         headers: {
  //           "x-access-token": token,
  //           "Content-Type": "multipart/form-data",
  //         },
  //       }
  //     );
  //     console.log("response", response);

  //     if (response.data.success) {
  //       toast.success("Store created successfully!");
  //       // Redirect to store management page
  //       navigate("/dashboard/store-management/overall");
  //     } else {
  //       toast.error(response.data.message || "Failed to create store");
  //     }
  //   } catch (error) {
  //     console.error("Error creating store:", error);
  //     if (axios.isAxiosError(error)) {
  //       if (!error.response) {
  //         toast.error("Network error. Please check your internet connection.");
  //       } else {
  //         toast.error(error.response.data.message || "Failed to create store");
  //       }
  //     } else {
  //       toast.error("An unexpected error occurred while creating store");
  //     }
  //   } finally {
  //     setIsSubmitting(false);
  //   }
  // };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.selectedPrefixId) {
      toast.error("Please select a prefix");
      return;
    }

    if (!autoGeneratedId) {
      toast.error("Store ID is required");
      return;
    }

    if (!formData.storeName) {
      toast.error("Store name is required");
      return;
    }

    if (!formData.managerId) {
      toast.error("Manager selection is required");
      return;
    }

    if (phoneValue && !isValidPhoneNumber(phoneValue)) {
      toast.error("Please enter a valid phone number");
      return;
    }

    // Check if store logo is uploaded
    // if (!storeLogo) {
    //   toast.error("Store logo is required");
    //   return;
    // }

    // Check if store image is uploaded
    if (storeImage.length === 0) {
      toast.error("Store image is required");
      return;
    }

    setIsSubmitting(true);

    try {
      const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      // Prepare social media links array
      const socialMediaLinks = [
        formData.facebookLink,
        formData.instagramLink,
        formData.linkedinLink,
      ].filter((link) => link !== ""); // Filter out empty links

      // Create FormData for file uploads
      const formDataToSend = new FormData();

      // Append all form fields
      formDataToSend.append("prefixId", formData.selectedPrefixId);
      formDataToSend.append("autoGenerated", autoGeneratedId);
      formDataToSend.append("storeName", formData.storeName);
      formDataToSend.append("location", formData.location);
      // Remove this line - don't send managerName
      // formDataToSend.append("managerName", formData.managerName);
      formDataToSend.append("phoneNumber", formData.phoneNumber);
      formDataToSend.append("email", formData.email);
      formDataToSend.append("status", formData.status);
      formDataToSend.append("managerId", formData.managerId);

      // Append social media links
      socialMediaLinks.forEach((link, index) => {
        formDataToSend.append(`socialMediaLinks[${index}]`, link);
      });

      // Append files
      if (storeLogo && storeLogo.originFileObj) {
        formDataToSend.append("storeLogo", storeLogo.originFileObj);
      }

      storeImage.forEach((file, index) => {
        if (file.originFileObj) {
          formDataToSend.append("storeImage", file.originFileObj);
        }
      });

      console.log("Submitting data with files");

      const response = await axios.post(
        `${API_URL}/api/abid-jewelry-ms/createShop`,
        formDataToSend,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "multipart/form-data",
          },
        }
      );
      console.log("response", response);

      if (response.data.success) {
        toast.success("Store created successfully!");
        // Redirect to store management page
        navigate("/dashboard/store-management/overall");
      } else {
        toast.error(response.data.message || "Failed to create store");
      }
    } catch (error) {
      console.error("Error creating store:", error);
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          toast.error("Network error. Please check your internet connection.");
        } else {
          toast.error(error.response.data.message || "Failed to create store");
        }
      } else {
        toast.error("An unexpected error occurred while creating store");
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  // Function to generate a random password
  const generatePassword = () => {
    const length = 12; // Define password length
    const charset =
      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+";
    let generatedPassword = "";
    for (let i = 0; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * charset.length);
      generatedPassword += charset[randomIndex];
    }
    setPassword(generatedPassword);
    // Fix: Update managerFormData instead of formData
    setManagerFormData((prev) => ({
      ...prev,
      password: generatedPassword,
      confirmPassword: generatedPassword,
    }));
  };

  const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
  const fetchRoles = async () => {
    // console.log('fsdfsdfsdf');

    try {
      const token = getAuthToken();
      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }
      const response = await axios.get(`${API_URL}/api/abid-jewelry-ms/roles`, {
        headers: {
          "x-access-token": token,
          "Content-Type": "application/json",
        },
      });
      if (response.data.success) {
        // console.log("fdsfsdf", response.data.roles);

        // Filter only manager roles (case-insensitive)
        const managerRoles = response.data.roles.filter(
          (role: any) => role.name && role.name.toLowerCase() === "manager"
        );

        setRoles(managerRoles);
      }
    } catch (error) {
      console.error("Error fetching roles:", error);
      toast.error("Failed to fetch roles");
    }
  };

  // Function to handle role selection
  const handleRoleSelect = async (name: string) => {
    // Find the role object by name
    const selectedRole = roles.find((role) => role.name === name);
    if (selectedRole) {
      const roleId = selectedRole._id;
      setSelectedRoleName(name);
      try {
        const token = getAuthToken();
        if (!token) {
          toast.error("Authentication token not found. Please login again.");
          return;
        }
        const response = await axios.get(
          `${API_URL}/api/abid-jewelry-ms/role/${roleId}`,
          {
            headers: {
              "x-access-token": token,
              "Content-Type": "application/json",
            },
          }
        );
        if (response.data.success) {
          console.log("Role details fetched:", response.data.role);
          // Fix: Update managerFormData instead of formData
          setManagerFormData((prev) => ({
            ...prev,
            role: roleId,
          }));
        }
      } catch (error) {
        console.error("Error fetching role details:", error);
        toast.error("Failed to fetch role details");
      }
    }
  };

  const handleStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setManagerFormData((prev) => ({
      ...prev,
      status: e.target.value,
    }));
  };

  // const validateForm = () => {
  //   if (!managerFormData.firstName.trim()) {
  //     toast.error("First name is required");
  //     return false;
  //   }
  //   if (!managerFormData.lastName.trim()) {
  //     toast.error("Last name is required");
  //     return false;
  //   }
  //   if (!managerFormData.email.trim()) {
  //     toast.error("Email is required");
  //     return false;
  //   }
  //   if (!managerFormData.phone.trim()) {
  //     toast.error("Manager Phone number is required");
  //     return false;
  //   }
  //   if (!managerFormData.password.trim()) {
  //     toast.error("Password is required");
  //     return false;
  //   }
  //   if (managerFormData.password !== managerFormData.confirmPassword) {
  //     toast.error("Passwords do not match");
  //     return false;
  //   }
  //   if (!managerFormData.role) {
  //     toast.error("Please select a role");
  //     return false;
  //   }
  //   // Validate phone number format
  //   if (phoneValue && !isValidPhoneNumber(phoneValue)) {
  //     toast.error("Please enter a valid phone number");
  //     return false;
  //   }
  //   return true;
  // };

  const validateForm = () => {
    if (!managerFormData.firstName.trim()) {
      toast.error("First name is required");
      return false;
    }
    if (!managerFormData.lastName.trim()) {
      toast.error("Last name is required");
      return false;
    }
    if (!managerFormData.email.trim()) {
      toast.error("Email is required");
      return false;
    }
    if (!managerFormData.phone.trim()) {
      toast.error("Manager Phone number is required");
      return false;
    }
    if (!managerFormData.password.trim()) {
      toast.error("Password is required");
      return false;
    }
    if (managerFormData.password !== managerFormData.confirmPassword) {
      toast.error("Passwords do not match");
      return false;
    }
    if (!managerFormData.role) {
      toast.error("Please select a role");
      return false;
    }
    // Validate manager phone number format
    if (managerPhoneValue && !isValidPhoneNumber(managerPhoneValue)) {
      toast.error("Please enter a valid manager phone number");
      return false;
    }
    return true;
  };

  const handleManagerFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Check permissions before submitting
    if (!isAdmin && !hasPermission("User Management", "create")) {
      toast.error("You don't have permission to add users");
      return;
    }

    if (!validateForm()) {
      return;
    }

    try {
      setLoading(true);
      const token = getAuthToken();
      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      // Create FormData object to handle file upload
      const formDataToSend = new FormData();

      // Add all manager form fields to FormData - Fix: use managerFormData
      Object.entries(managerFormData).forEach(([key, value]) => {
        formDataToSend.append(key, value);
      });

      // Add profile image if it exists
      if (uploadedFile) {
        formDataToSend.append("profileImage", uploadedFile);
      }

      // console.log(
      //   "Sending manager form data:",
      //   Object.fromEntries(formDataToSend)
      // );

      const response = await axios.post(
        `${API_URL}/api/abid-jewelry-ms/addUser`,
        formDataToSend,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "multipart/form-data",
          },
        }
      );

      if (response.data.success) {
        // console.log("User added successfully:", response.data);
        toast.success("Manager added successfully!");
        setManagerDropdownKey((prev) => prev + 1);

        // await fetchRoles();
        // Reset form and uploaded file
        setManagerFormData({
          firstName: "",
          lastName: "",
          email: "",
          phone: "",
          password: "",
          confirmPassword: "",
          role: "",
          status: "active",
        });
        setPassword("");
        setSelectedRoleName("");
        setManagerPhoneValue(undefined); // Reset manager phone
        setUploadedFile(null);
        setIsAddManagerModalOpen(false); // Close modal
      } else {
        toast.error(response.data.message || "Failed to add user");
      }
    } catch (error: any) {
      console.error("Error adding user:", error);
      const errorMessage =
        error.response?.data?.message ||
        "An error occurred while adding the user";
      toast.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleManagerIconClick = () => {
    console.log("Add Manager icon clicked");
    setIsAddManagerModalOpen(true);
    fetchRoles();
    fetchPrefixes(); // Fetch prefixes when opening modal
  };
  return (
    <div className="w-full mx-auto px-3 py-6 sm:px-4 md:px-6 xl:px-8 xl:py-6">
      <h2 className="Source-Sans-Pro-font font-semibold text-[#5D6679] text-[20px] mb-2">
        <Link
          to="/dashboard/store-management/overall"
          className="cursor-pointer"
        >
          Store Management
        </Link>{" "}
        / <span className="text-black">Add New Store</span>
      </h2>

      <div className="bg-white rounded-lg shadow-md px-4 md:px-10 py-6">
        <form className="" onSubmit={handleSubmit}>
          <div className="">
            {/* Top Side */}
            <p className="Source-Sans-Pro-font text-[#056BB7] font-semibold text-[24px] m-0">
              Add New Store
            </p>
            <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-8 md:gap-12 lg:gap-16 xl:gap-32 text-[15px] Poppins-font font-medium">
              {/* Left Side */}
              <div className="space-y-4">
                <div className="flex flex-col">
                  <label htmlFor="" className="mb-1">
                    Store ID <span className="text-red-500"> *</span>
                  </label>
                  <div className="flex items-center gap-3 w-full">
                    <div className="xl:w-[35%] lg:w-[50%] md:w-[60%] sm:w-[25%] w-[35%]">
                      {/* <AddStoreDropDown
                        defaultValue="Prefix"
                        options={prefixData.map((prefix) => prefix.name)}
                        className="!w-[100%] border"
                        onSelect={handlePrefixSelect}
                      /> */}

                      <AddStoreDropDown
                        defaultValue="Prefix"
                        options={prefixData.map((prefix) => prefix.name)}
                        className="!w-[100%] border"
                        onSelect={handlePrefixSelect}
                        searchable={true} // Add this prop
                        noResultsMessage="No prefix found" // Add this prop
                      />
                    </div>
                    <span>-</span>
                    <input
                      type="text"
                      id="sku"
                      placeholder="Auto Generate"
                      value={autoGeneratedId}
                      readOnly
                      className="w-[65%] px-4 py-2 text-sm text-gray-700 placeholder-gray-400 border border-gray-300 outline-none rounded-md"
                    />
                  </div>
                </div>
                <div className="flex flex-col">
                  <label htmlFor="storeName" className="mb-1">
                    Store Name<span className="text-red-500"> *</span>
                  </label>
                  <Input
                    name="storeName"
                    placeholder="Downtown Branch"
                    className="outline-none focus:outline-none w-full"
                    value={formData.storeName}
                    onChange={handleStoreInputChange} // Changed from handleInputChange
                  />
                </div>

                <div className="flex flex-col">
                  <label htmlFor="location" className="mb-1">
                    Location<span className="text-red-500"> *</span>
                  </label>
                  <Input
                    name="location"
                    placeholder="Street, City, State, Zip Code, Country"
                    className="outline-none focus:outline-none w-full"
                    value={formData.location}
                    onChange={handleStoreInputChange} // Changed from handleInputChange
                  />
                </div>
                <div className="flex flex-col">
                  {/* <label htmlFor="managerName" className="mb-1">
                    Manager<span className="text-red-500"> *</span>
                  </label>
 */}

                  <div className="flex items-center gap-2">
                    <label htmlFor="managerName" className="mb-1">
                      Manager <span className="text-red-500"> *</span>
                    </label>
                    <div
                      className="cursor-pointer mb-1"
                      onClick={handleManagerIconClick}
                      style={{ display: "inline-block" }}
                    >
                      <img
                        src={plusIcon || "/placeholder.svg"}
                        alt="Add sub-category"
                        width={16}
                      />
                    </div>
                  </div>

                  <ManagerDropDown
                    key={managerDropdownKey}
                    onSelect={handleUserSelect}
                    searchable={true}
                    className="outline-none focus:outline-none w-full"
                    noResultsMessage="No manager found"
                  />
                </div>

                {/* <div className="flex flex-col">
                  <label htmlFor="phoneNumber" className="mb-1">
                    Phone No<span className="text-red-500"> *</span>
                  </label>
                  <Input
                    name="phoneNumber"
                    placeholder="+56 362738233"
                    className="outline-none focus:outline-none w-full"
                    value={formData.phoneNumber}
                    onChange={handleInputChange}
                  />
                </div> */}

                {/* Phone Number Input with react-phone-number-input */}
                <div className="flex flex-col">
                  <label htmlFor="phoneNumber" className="mb-1">
                    Phone No<span className="text-red-500"> *</span>
                  </label>
                  <PhoneInput
                    placeholder="Enter phone number"
                    value={phoneValue}
                    onChange={handlePhoneChange}
                    defaultCountry="GB"
                    international
                    countryCallingCodeEditable={false}
                    className={`phone-input-container ${
                      phoneError ? "border-red-500" : ""
                    }`}
                    style={{
                      "--PhoneInputCountryFlag-height": "1em",
                      "--PhoneInputCountrySelectArrow-color": "#6b7280",
                    }}
                  />
                  {phoneError && (
                    <span className="text-red-500 text-xs mt-1">
                      {phoneError}
                    </span>
                  )}
                  <span className="text-gray-500 text-xs mt-1">
                    Phone number with country code (UK selected by default)
                  </span>
                </div>

                <div className="flex flex-col">
                  <label htmlFor="email" className="mb-1">
                    Email<span className="text-red-500"> *</span>
                  </label>
                  <Input
                    name="email"
                    placeholder="john@example.com"
                    className="outline-none focus:outline-none w-full"
                    value={formData.email}
                    onChange={handleStoreInputChange} // Changed from handleInputChange
                  />
                </div>
                <div className="flex flex-col">
                  <div>
                    <span className="text-sm font-medium">Status</span>
                  </div>
                  <div className="flex gap-4">
                    <label className="flex items-center gap-2 text-sm border px-3 py-2 border-gray-200 rounded-md">
                      <input
                        type="radio"
                        name="status"
                        value="active"
                        className="accent-blue-600"
                        checked={formData.status === "active"}
                        onChange={handleStoreStatusChange}
                      />
                      Active
                    </label>
                    <label className="flex items-center gap-2 text-sm border px-2 py-2 border-gray-200 rounded-md">
                      <input
                        type="radio"
                        name="status"
                        value="inactive"
                        className="accent-blue-600"
                        checked={formData.status === "inactive"}
                        onChange={handleStoreStatusChange}
                      />
                      Inactive
                    </label>
                  </div>
                </div>
              </div>

              {/* Right Side */}
              <div className="space-y-4">
                <div className="flex flex-col gap-2">
                  <label htmlFor="" className="">
                    Social media links
                  </label>
                  <Input
                    name="facebookLink"
                    icon={<FaFacebook className="text-gray-400" size={20} />}
                    placeholder="facebook link"
                    className="outline-none focus:outline-none w-full"
                    value={formData.facebookLink}
                    onChange={handleStoreInputChange}
                  />
                  <Input
                    name="instagramLink"
                    icon={
                      <AiFillInstagram className="text-gray-400" size={22} />
                    }
                    placeholder="instagram link"
                    className="outline-none focus:outline-none w-full"
                    value={formData.instagramLink}
                    onChange={handleStoreInputChange}
                  />
                  <Input
                    name="linkedinLink"
                    icon={
                      <BiLogoLinkedinSquare
                        className="text-gray-400"
                        size={22}
                      />
                    }
                    placeholder="linkedin link"
                    className="outline-none focus:outline-none w-full"
                    value={formData.linkedinLink}
                    onChange={handleStoreInputChange}
                  />
                </div>

                <div className="w-full">
                  <label className="block mb-2 font-medium w-full">
                    Store Logo
                    {/* <span className="text-red-500">*</span> */}
                  </label>

                  <Dragger {...storeLogoProps} className="w-full" height={40}>
                    <div className="rounded-lg flex items-center justify-between cursor-pointe transition !w-full -mt-2">
                      <span className="text-gray-500">
                        {storeLogo ? storeLogo.name : "Upload a logo image"}
                      </span>
                      <FiUpload className="text-xl text-gray-500" />
                    </div>
                  </Dragger>
                  <span className="text-[#2C8CD4] !text-[12px]">
                    Select a png (5MB) 200X200
                  </span>

                  {storeLogo && (
                    <div className="mt-4 flex items-start justify-between gap-4">
                      <Image
                        width={100}
                        height={100}
                        className=" border border-gray-300"
                        src={
                          storeLogo.thumbUrl ||
                          storeLogo.url ||
                          (storeLogo.originFileObj
                            ? URL.createObjectURL(storeLogo.originFileObj)
                            : "")
                        }
                        alt={storeLogo.name}
                        style={{ objectFit: "cover", borderRadius: "8px" }}
                      />
                      <div className="flex items-center gap-2">
                        <p
                          className={`font-medium ${
                            storeLogoStatus === "success"
                              ? "text-green-600"
                              : storeLogoStatus === "error"
                              ? "text-red-600"
                              : "text-gray-500"
                          }`}
                        >
                          Status: {storeLogoStatus}
                        </p>
                        <DeleteOutlined
                          onClick={handleRemoveLogo}
                          className="text-red-500 text-lg cursor-pointer hover:text-red-700"
                        />
                      </div>
                    </div>
                  )}
                </div>

                <div className="flex flex-col">
                  <label htmlFor="" className="mb-1">
                    Upload Store Image <span className="text-red-500">*</span>
                  </label>
                  <Dragger
                    {...storeImageProps}
                    className="mb-1 w-[320px]"
                    height={170}
                  >
                    <p className="ant-upload-drag-icon ">
                      <InboxOutlined />
                    </p>
                    <p className="ant-upload-text ">
                      Drag and Drop a file here
                    </p>
                    <p className="ant-upload-hint !text-[#1A8CE0]">
                      or Browse a Images
                    </p>
                  </Dragger>
                  {storeImage.length > 0 && (
                    <p
                      className={`mt-2 font-medium ${
                        storeImageStatus === "success"
                          ? "text-green-600"
                          : storeImageStatus === "error"
                          ? "text-red-600"
                          : "text-gray-500"
                      }`}
                    >
                      {storeImage.length} file(s) uploaded
                    </p>
                  )}
                </div>

                <div className="flex justify-end gap-4 Poppins-font font-medium mt-3">
                  <Button
                    text="Cancel"
                    type="button"
                    onClick={() =>
                      navigate("/dashboard/store-management/overall")
                    }
                    className="px-6 !bg-[#F4F4F5] !border-none "
                  />
                  {canCreate && (
                    <Button
                      text={isSubmitting ? "Saving..." : "Save"}
                      type="submit"
                      disabled={isSubmitting}
                      className="px-6 !bg-[#056BB7] border-none text-white"
                    />
                  )}
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>

      <style>{`
  .PhoneInput {
    display: flex;
    align-items: center;
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    padding: 0.75rem 1rem;
    background-color: white;
    font-size: 0.875rem;
    transition: all 0.2s ease-in-out;
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  }
  
  .PhoneInput:hover {
    border-color: #d1d5db;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
  }
  
  .PhoneInputCountrySelect {
    margin-right: 1rem;
    border: none;
    background: transparent;
    font-size: 0.875rem;
    cursor: pointer;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    transition: background-color 0.2s ease-in-out;
  }
  
  .PhoneInputCountrySelect:hover {
    background-color: #f9fafb;
  }
  
  .PhoneInputCountrySelect:focus {
    outline: none;
    background-color: #f3f4f6;
  }
  
  .PhoneInputInput {
    border: none;
    outline: none;
    flex: 1;
    font-size: 0.875rem;
    background: transparent;
    color: #374151;
    font-weight: 400;
  }
  
  .PhoneInputInput::placeholder {
    color: #9ca3af;
    font-weight: 400;
  }
  
  .phone-input-container.border-red-500 .PhoneInput {
    border-color: #ef4444;
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }
`}</style>

      {/* Add Manager Modal */}
      {isAddManagerModalOpen && (
        <div
          className="fixed inset-0 flex items-center justify-center bg-black/20 z-50"
          onClick={() => setIsAddManagerModalOpen(false)}
        >
          <div
            className="animate-scaleIn bg-white rounded-xl w-full max-w-6xl mx-4 relative shadow-lg max-h-[90vh] overflow-y-auto"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-semibold text-[#056BB7]">
                  Add Manager Role
                </h3>
                <button
                  onClick={() => setIsAddManagerModalOpen(false)}
                  className="text-xl font-bold text-gray-500 hover:text-gray-700"
                >
                  ×
                </button>
              </div>

              <form
                className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-8 md:gap-12 lg:gap-16 xl:gap-32 text-[15px] Poppins-font font-medium"
                onSubmit={handleManagerFormSubmit}
              >
                {/* Left Side */}
                <div className="space-y-4">
                  <div className="flex flex-col">
                    <label htmlFor="firstName" className="mb-1">
                      First Name <span className="text-red-500">*</span>
                    </label>
                    <Input
                      name="firstName"
                      placeholder="First Name"
                      className="outline-none focus:outline-none w-full"
                      value={managerFormData.firstName}
                      onChange={handleInputChange}
                      // required
                    />
                  </div>
                  <div className="flex flex-col">
                    <label htmlFor="lastName" className="mb-1">
                      Last Name <span className="text-red-500">*</span>
                    </label>
                    <Input
                      name="lastName"
                      placeholder="Last Name"
                      className="outline-none focus:outline-none w-full"
                      value={managerFormData.lastName}
                      onChange={handleInputChange}
                      // required
                    />
                  </div>
                  <div className="flex flex-col w-full">
                    <label
                      htmlFor="password"
                      className="mb-1 font-semibold text-sm"
                    >
                      Password <span className="text-red-500">*</span>
                    </label>
                    <div className="flex w-full items-center border border-gray-300 rounded-md overflow-hidden p-1">
                      <input
                        type="text"
                        id="password"
                        name="password"
                        placeholder="Enter Password"
                        value={password}
                        onChange={(e) => {
                          setPassword(e.target.value);
                          // Fix: Update managerFormData instead of formData
                          setManagerFormData((prev) => ({
                            ...prev,
                            password: e.target.value,
                          }));
                        }}
                        className="w-full px-4 py-2 text-sm text-gray-700 placeholder-gray-400 border-none outline-none"
                      />

                      <Button
                        onClick={generatePassword}
                        className="bg-[#28A745] text-white text-sm font-semibold px-4 py-2 hover:bg-green-600 transition-colors !border-none"
                        text="Generate"
                        type="button"
                      />
                    </div>
                  </div>
                  <div className="flex flex-col">
                    <label htmlFor="confirmPassword" className="mb-1">
                      Confirm Password <span className="text-red-500">*</span>
                    </label>
                    <Input
                      name="confirmPassword"
                      type="password"
                      placeholder="Confirm Password"
                      className="outline-none focus:outline-none w-full"
                      value={managerFormData.confirmPassword}
                      onChange={handleInputChange}
                      // required
                    />
                  </div>
                  <div className="flex flex-col">
                    <label htmlFor="role" className="mb-1">
                      Role <span className="text-red-500">*</span>
                    </label>
                    <Dropdown
                      options={roles.map((role) => role.name)}
                      className="w-full"
                      onSelect={handleRoleSelect}
                      noResultsMessage="No roles found"
                      defaultValue={selectedRoleName || "Select Role"}
                      searchable={true}
                    />
                  </div>
                  <div className="flex flex-col">
                    <label htmlFor="email" className="mb-1">
                      Email <span className="text-red-500">*</span>
                    </label>
                    <Input
                      name="email"
                      type="email"
                      placeholder="john@example.com"
                      className="outline-none focus:outline-none w-full"
                      value={managerFormData.email}
                      onChange={handleInputChange}
                    />
                  </div>

                  {/* Phone Number Input with react-phone-number-input */}
                  <div className="flex flex-col">
                    <label htmlFor="phone" className="mb-1">
                      Phone No <span className="text-red-500">*</span>
                    </label>
                    <PhoneInput
                      placeholder="Enter phone number"
                      value={managerPhoneValue}
                      onChange={handleMangerPhoneChange}
                      defaultCountry="GB"
                      international
                      countryCallingCodeEditable={false}
                      className={`phone-input-container ${
                        phoneError ? "border-red-500" : ""
                      }`}
                      style={{
                        "--PhoneInputCountryFlag-height": "1em",
                        "--PhoneInputCountrySelectArrow-color": "#6b7280",
                      }}
                    />
                    {phoneError && (
                      <span className="text-red-500 text-xs mt-1">
                        {phoneError}
                      </span>
                    )}
                    <span className="text-gray-500 text-xs mt-1">
                      Phone number with country code (UK selected by default)
                    </span>
                  </div>

                  <div className="flex gap-2 flex-col">
                    <div>
                      <span className="text-sm font-medium">Status</span>
                    </div>
                    <div className="flex gap-4">
                      <label className="flex items-center gap-2 text-sm border px-3 py-2 border-gray-200 rounded-md">
                        <input
                          type="radio"
                          name="status"
                          value="active"
                          checked={managerFormData.status === "active"}
                          onChange={handleStatusChange}
                          className="accent-blue-600"
                        />
                        Active
                      </label>
                      <label className="flex items-center gap-2 text-sm border px-2 py-2 border-gray-200 rounded-md">
                        <input
                          type="radio"
                          name="status"
                          value="inactive"
                          checked={managerFormData.status === "inactive"}
                          onChange={handleStatusChange}
                          className="accent-blue-600"
                        />
                        Inactive
                      </label>
                    </div>
                  </div>
                </div>

                {/* Right Side */}
                <div className="space-y-4 relative">
                  <div className="flex flex-col !mb-12 sm:mb-0">
                    <label htmlFor="" className="mb-1">
                      Upload Image{" "}
                      <span className="text-[11px]">(optional)</span>
                    </label>
                    <DropImage
                      uploadedFile={uploadedFile}
                      setUploadedFile={setUploadedFile}
                      className="w-2/3 xl:w-2/3"
                    />
                    {uploadedFile && (
                      <p className="text-sm text-green-600 mt-2">
                        Image selected: {uploadedFile.name}
                      </p>
                    )}
                  </div>
                  <div className="flex justify-end gap-4 Poppins-font font-medium mt-8 absolute bottom-0 w-full">
                    <Button
                      text="Back"
                      type="button"
                      onClick={() =>
                        navigate("/dashboard/user-management/overall", {
                          replace: true,
                        })
                      }
                      className="px-6 !bg-[#F4F4F5] !border-none"
                    />
                    {/* Conditionally render Save button based on permissions */}
                    {(isAdmin ||
                      hasPermission("User Management", "create")) && (
                      <Button
                        text={loading ? "Saving..." : "Save"}
                        type="submit"
                        disabled={loading}
                        className={`px-6 !bg-[#056BB7] border-none text-white ${
                          loading ? "opacity-70 cursor-not-allowed" : ""
                        }`}
                      />
                    )}
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AddItem;
