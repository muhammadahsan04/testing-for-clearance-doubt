import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { toast } from "react-toastify";
import Button from "../../../components/Button";
import StoreTable from "../../../components/StoreTable";
import { StatCard } from "../userManagementSections/OverAll";
import AddZoneModal from "../../../components/AddZoneModal";
import { hasPermission } from "../sections/StoreManagement";

interface Column {
  header: string;
  accessor: string;
  type?: "text" | "image" | "status" | "actions";
}

interface Store {
  id: string;
  name: string;
  userImage: string;
  zone: string;
  status: string;
  originalData?: any;
}

// getUserRole function add
const getUserRole = () => {
  let role = localStorage.getItem("role");
  if (!role) {
    role = sessionStorage.getItem("role");
  }
  return role;
};

const ViewAllStores: React.FC = () => {
  const [showModal, setShowModal] = useState(false);
  const [roleName, setRoleName] = useState("");
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [deleteModal, setDeleteModal] = useState(false);
  const [storeData, setStoreData] = useState<Store[]>([]);
  const [loading, setLoading] = useState(false);
  const [totalStores, setTotalStores] = useState(0);
  const [activeStores, setActiveStores] = useState(0);
  const [inactiveStores, setInactiveStores] = useState(0);
  const [topPerformingStore, setTopPerformingStore] = useState("--");

  const navigate = useNavigate();

  // Permission variables add
  const userRole = getUserRole();
  const isAdmin = userRole === "Admin" || userRole === "SuperAdmin";
  const canCreate = isAdmin || hasPermission("Store Management", "create");
  const canUpdate = isAdmin || hasPermission("Store Management", "update");
  const canDelete = isAdmin || hasPermission("Store Management", "delete");

  // Helper function to get auth token
  const getAuthToken = () => {
    let token = localStorage.getItem("token");
    if (!token) {
      token = sessionStorage.getItem("token");
    }
    return token;
  };

  useEffect(() => {
    fetchStores();
  }, []);

  const fetchStores = async () => {
    try {
      setLoading(true);

      const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const response = await axios.get(
        `${API_URL}/api/abid-jewelry-ms/getAllShops`,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data && response.data.data) {
        const formattedData = response.data.data.map((store: any) => ({
          id: store.autoGenerated,
          storeId: store._id,
          name: store.storeName,
          userImage:
            `${API_URL}${store.storeLogo}` || "https://via.placeholder.com/50",
          zone: store?.prefixId?.prefixName || "--",
          status: store.status,
          originalData: store,
          managerId: store.managerId,
        }));

        setStoreData(formattedData);
        setTotalStores(formattedData.length);
        setActiveStores(
          formattedData.filter((store: any) => store?.status === "active")
            .length
        );
        setInactiveStores(
          formattedData.filter((store: any) => store?.status === "inactive")
            .length
        );

        // Set top performing store (for now just using the first active store)
        const activeStore = formattedData.find(
          (store: any) => store?.status === "active"
        );
        if (activeStore) {
          setTopPerformingStore(activeStore.name);
        }
      }
    } catch (error) {
      console.error("Error fetching stores:", error);
      toast.error("Failed to fetch stores. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  const handleViewAllClick = (role: string) => {
    if (role === "ZoneOne") {
      navigate("/dashboard/store-management/zone-one");
    }
    if (role === "ZoneTwo") {
      navigate("/dashboard/store-management/zone-two");
    }
    if (role === "ZoneThree") {
      navigate("/dashboard/store-management/zone-three");
    }
    if (role === "ZoneFour") {
      navigate("/dashboard/store-management/zone-four");
    }
    if (role === "ZoneFive") {
      navigate("/dashboard/store-management/zone-five");
    }
  };

  const columns: Column[] = [
    { header: "Store ID", accessor: "id" },
    { header: "Store Name", accessor: "name", type: "image" },
    { header: "Status", accessor: "status", type: "status" },
    { header: "Zone", accessor: "zone" },
    { header: "Actions", accessor: "actions", type: "actions" },
  ];

  // Handle edit and delete callbacks
  const handleEdit = (row: any) => {
    if (row === null) {
      // This is a callback after edit is complete
      fetchStores();
    } else {
      setSelectedUser(row);
    }
  };

  const handleDelete = (row: any) => {
    if (!canDelete) {
      toast.error("You don't have permission to delete store");
      return;
    }

    if (row === null) {
      // This is a callback after delete is complete
      fetchStores();
    } else {
      setSelectedUser(row);
      setShowDeleteModal(true);
    }
  };

  return (
    <div className="mx-auto px-3 py-6 sm:px-4 md:px-6 xl:px-8 xl:py-6 space-y-6 lg:w-[100%] xl:w-full w-full overflow-x-hidden">
      <h2 className="Inter-font font-semibold text-[20px] mb-2">
        Store Management
      </h2>

      {/* Stat Cards */}
      <div className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-4 gap-2 md:gap-4 bg-white shadow rounded-xl p-4">
        <StatCard
          label="Total Stores"
          value={totalStores.toString()}
          textColor="text-orange-400"
        />
        <StatCard
          label="Active Stores"
          value={activeStores.toString()}
          textColor="text-green-400"
        />
        <StatCard
          label="Inactive Stores"
          value={inactiveStores.toString()}
          textColor="text-purple-500"
        />
        <StatCard
          label="Top Performing Store"
          value={topPerformingStore}
          textColor="text-red-400"
        />
      </div>

      {loading ? (
        <div className="flex justify-center items-center h-40">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      ) : (
        <StoreTable
          columns={columns}
          data={storeData}
          tableTitle="Stores"
          onEdit={handleEdit}
          onDelete={handleDelete}
          canUpdate={canUpdate}
          canDelete={canDelete}
        />
      )}
    </div>
  );
};

export default ViewAllStores;

export const ZoneCard = ({
  role,
  count,
  color = "text-[#F22F46]",
  bg = "bg-[#FFE8EC]",
  onViewAllClick,
  btnBg,
}: {
  role: string;
  count: string;
  color?: string;
  bg?: string;
  btnBg?: string;
  onViewAllClick?: () => void;
}) => (
  <div
    className={`rounded-2xl p-3 md:p-3 lg:p-4 ${bg} shadow w-full flex gap-2 items-center justify-between border border-gray-300`}
  >
    <p
      className={`w-auto sm:w-[40%] text-nowrap text-sm sm:text-base md:text-sm lg:text-md font-semibold flex items-center ${color}`}
    >
      {role}
    </p>
    <div className="flex flex-col items-end">
      <div className="flex items-start gap-1 text-[#2B2E36] w-full">
        <p className="text-sm sm:text-md font-semibold !text-left">{count}</p>
        <p className="text-xs mb-1 text-gray-500 mt-0.5">store</p>
      </div>
      <button
        onClick={onViewAllClick}
        className={`${btnBg} text-white text-xs sm:text-sm px-2 sm:px-4 py-1 rounded-lg font-medium shadow-sm hover:opacity-90 w-full sm:w-auto whitespace-nowrap`}
      >
        View all
      </button>
    </div>
  </div>
);
