import { useState, useEffect, useRef } from "react";
import { PlusCircle, X } from "lucide-react";
import Button from "../../../components/Button";
import Input from "../../../components/Input";
import Dropdown from "../../../components/Dropdown";
import type { UploadFile, UploadProps } from "antd";
import { message, Upload, Image } from "antd";
import {
  CameraOutlined,
  DeleteOutlined,
  InboxOutlined,
} from "@ant-design/icons";
import plusIcon from "../../../assets/plus.svg";
import ItemCategoryTable from "../../../components/ItemCategoryTable";
import bracelet from "../../../assets/bracelet.png";
import axios from "axios";
import { toast } from "react-toastify";
import { hasPermission } from "../sections/CoreSettings";

// Helper function to get auth token
const getAuthToken = () => {
  let token = localStorage.getItem("token");
  if (!token) {
    token = sessionStorage.getItem("token");
  }
  return token;
};

interface SkuPrefix {
  _id: string;
  prefixName: string;
  status: string;
}

interface Category {
  _id: string;
  name: string;
  description: string;
}

interface SubCategory {
  _id: string;
  name: string;
  category: string;
}

interface ItemData {
  _id: string;
  prefixId: {
    _id: string;
    prefixName: string;
    status: string;
  };
  autoGenerated: string;
  barcode: string;
  unitType: string;
  productFor: string[];
  category: {
    _id: string;
    name: string;
    description: string;
  };
  subCategory: {
    _id: string;
    name: string;
    category: string;
  };
  style: string;
  goldCategory: string;
  diamondWeight: string;
  goldWeight: string;
  length: string;
  mm: string;
  size: string;
  searchTag: string;
  itemImage: string;
  uploadMultipleItemImages: string[];
}

// getUserRole function add
const getUserRole = () => {
  let role = localStorage.getItem("role");
  if (!role) {
    role = sessionStorage.getItem("role");
  }
  return role;
};

export default function AddItem() {
  const [barcode, setBarcode] = useState("");
  const [searchTags, setSearchTags] = useState<string[]>([]);
  const [searchTagInput, setSearchTagInput] = useState("");
  const [featuredImage, setFeaturedImage] = useState<string | null>(null);
  const [galleryImages, setGalleryImages] = useState<string[]>([]);
  const [image, setImage] = useState<UploadFile | null>(null);
  const [status, setStatus] = useState<"success" | "error" | null>(null);
  const [selectedUser, setSelectedUser] = useState(null);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);
  const [isSubCategoryModalOpen, setIsSubCategoryModalOpen] = useState(false);
  const [isStyleModalOpen, setIsStyleModalOpen] = useState(false);
  const [isGoldCategoryModalOpen, setIsGoldCategoryModalOpen] = useState(false);
  const [newCategory, setNewCategory] = useState("");
  const [newStyle, setNewStyle] = useState("");
  const [newStyleDescription, setNewStyleDescription] = useState("");
  const [newGoldCategory, setNewGoldCategory] = useState("");
  const [newGoldCategoryDescription, setNewGoldCategoryDescription] =
    useState("");
  const [newSubCategory, setNewSubCategory] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("");
  const [categories, setCategories] = useState<string[]>([]);
  const [subCategories, setSubCategories] = useState<string[]>([]);
  // State for styles and gold categories
  const [styleData, setStyleData] = useState<any[]>([]);
  const [styles, setStyles] = useState<string[]>([]);
  const [goldCategoryData, setGoldCategoryData] = useState<any[]>([]);
  const [goldCategories, setGoldCategories] = useState<string[]>([]);
  const [selectedStyleId, setSelectedStyleId] = useState("");
  const [selectedGoldCategoryId, setSelectedGoldCategoryId] = useState("");

  const [selectedStyle, setSelectedStyle] = useState("");
  const [selectedGoldCategory, setSelectedGoldCategory] = useState("");

  // New state variables for API data
  const [skuPrefixes, setSkuPrefixes] = useState<SkuPrefix[]>([]);
  const [categoryData, setCategoryData] = useState<Category[]>([]);
  const [subCategoryData, setSubCategoryData] = useState<SubCategory[]>([]);
  const [selectedPrefix, setSelectedPrefix] = useState("");
  const [autoGeneratedNumber, setAutoGeneratedNumber] = useState("");
  const [selectedCategoryId, setSelectedCategoryId] = useState("");
  const [selectedSubCategoryId, setSelectedSubCategoryId] = useState("");

  const [categoryDropdownKey, setCategoryDropdownKey] = useState(0);
  const [subCategoryDropdownKey, setSubCategoryDropdownKey] = useState(0);
  const [styleDropdownKey, setStyleDropdownKey] = useState(0);
  const [goldCategoryDropdownKey, setGoldCategoryDropdownKey] = useState(0);
  const [prefixDropdownKey, setPrefixDropdownKey] = useState(0);

  // Form state variables
  const [unitType, setUnitType] = useState("");
  const [productFor, setProductFor] = useState<string[]>([]);
  const [style, setStyle] = useState("");
  const [goldCategory, setGoldCategory] = useState("");
  const [diamondWeight, setDiamondWeight] = useState("");
  const [goldWeight, setGoldWeight] = useState("");
  const [length, setLength] = useState("");
  const [mm, setMm] = useState("");
  const [size, setSize] = useState("");
  // Add state for multiple gallery images
  const [galleryImageFiles, setGalleryImageFiles] = useState<UploadFile[]>([]);

  const [isLoading, setIsLoading] = useState(false);
  // Add state for productFor validation error
  const [productForError, setProductForError] = useState("");

  // Add state for delete loading
  const [deleteLoading, setDeleteLoading] = useState(false);

  // Add state for items data
  const [itemsData, setItemsData] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);

  // Refs for modal click outside detection
  const categoryModalRef = useRef<HTMLDivElement>(null);
  const subCategoryModalRef = useRef<HTMLDivElement>(null);
  const styleModalRef = useRef<HTMLDivElement>(null);
  const goldCategoryModalRef = useRef<HTMLDivElement>(null);

  // Permission variables add
  const userRole = getUserRole();
  const isAdmin = userRole === "Admin" || userRole === "SuperAdmin";
  const canCreate = isAdmin || hasPermission("Core Setting", "create");
  const canUpdate = isAdmin || hasPermission("Core Setting", "update");
  const canDelete = isAdmin || hasPermission("Core Setting", "delete");

  const API_URL = import.meta.env.VITE_BASE_URL || "http://192.168.100.18:9000";

  // Fetch all items
  const fetchAllItems = async () => {
    try {
      setLoading(true);
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const response = await axios.get(
        `${API_URL}/api/abid-jewelry-ms/getAllItems`,
        {
          headers: {
            "x-access-token": token,
          },
        }
      );

      if (response.data.success) {
        // Transform the API data to match table format
        const transformedData = response.data.data.map(
          (item: any, index: number) => ({
            _id: item._id,
            sno: String(index + 1).padStart(2, "0"),
            sku: `${item.prefixId?.prefixName || ""}-${
              item.autoGenerated || ""
            }`,
            Barcode: item.barcode || "",
            unitType: item.unitType || "",
            categoryImage: `${API_URL}${item.itemImage}` || "",
            productFor: Array.isArray(item.productFor)
              ? item.productFor.join(", ")
              : item.productFor || "",
            category: item.category?.name || "", // ✅ This is correct - extracting name
            subCategory: item.subCategory?.name || "", // ✅ This is correct - extracting name
            style: item.style?.name || "",
            goldCTG: item.goldCategory?.name || "",
            diamondWeight: item.diamondWeight || "",
            goldWeight: item.goldWeight || "",
            length: item.length || "",
            mm: item.mm || "",
            size: item.size || "",
            searchTag: Array.isArray(item.searchTag)
              ? item.searchTag.join(", ")
              : item.searchTag || "",
            status: item.status || "Active",
          })
        );
        // console.log("transformedData", transformedData);

        setItemsData(transformedData);
      }
    } catch (error) {
      console.error("Error fetching items:", error);
      toast.error("Failed to fetch items");
    } finally {
      setLoading(false);
    }
  };

  // Add the missing delete function
  const handleDeleteItem = async (item: any) => {
    if (!canDelete) {
      toast.error("You don't have permission to delete items");
      return;
    }

    if (!item || !item._id) {
      toast.error("Invalid item selected for deletion");
      return;
    }

    try {
      setDeleteLoading(true);
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      console.log("Deleting item with ID:", item._id); // Debug log

      const response = await axios.delete(
        `${API_URL}/api/abid-jewelry-ms/deleteItem/${item._id}`,
        {
          headers: {
            "x-access-token": token,
          },
        }
      );

      if (response.data.success) {
        toast.success("Item deleted successfully!");
        // Refresh the items list
        fetchAllItems();
      } else {
        toast.error(response.data.message || "Failed to delete item");
      }
    } catch (error) {
      console.error("Error deleting item:", error);
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          toast.error("Network error. Please check your internet connection.");
        } else {
          const errorMessage =
            error.response.data?.message || "Failed to delete item";
          toast.error(errorMessage);
        }
      } else {
        toast.error("An unexpected error occurred while deleting item");
      }
    } finally {
      setDeleteLoading(false);
    }
  };

  // Fetch SKU Prefixes
  const fetchSkuPrefixes = async () => {
    try {
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }
      const response = await axios.get(
        `${API_URL}/api/abid-jewelry-ms/getAllSkuPrefix`,
        {
          headers: {
            "x-access-token": token,
          },
        }
      );
      if (response.data.success) {
        setSkuPrefixes(response.data.data);
      }
    } catch (error) {
      console.error("Error fetching SKU prefixes:", error);
      toast.error("Failed to fetch SKU prefixes");
    }
  };

  // Fetch Categories
  const fetchCategories = async () => {
    try {
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const response = await axios.get(
        `${API_URL}/api/abid-jewelry-ms/getAllCategory`,

        {
          headers: {
            "x-access-token": token,
          },
        }
      );
      if (response.data.success) {
        setCategoryData(response.data.data);
        setCategories(response.data.data.map((cat: Category) => cat.name));
      }
    } catch (error) {
      console.error("Error fetching categories:", error);
      toast.error("Failed to fetch categories");
    }
  };

  // Fetch Sub Categories
  const fetchSubCategories = async () => {
    try {
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const response = await axios.get(
        `${API_URL}/api/abid-jewelry-ms/getAllSubCategory`,
        {
          headers: {
            "x-access-token": token,
          },
        }
      );
      if (response.data.success) {
        setSubCategoryData(response.data.data);
        setSubCategories(
          response.data.data.map((subCat: SubCategory) => subCat.name)
        );
      }
    } catch (error) {
      console.error("Error fetching sub categories:", error);
      toast.error("Failed to fetch sub categories");
    }
  };

  // Generate auto number when prefix is selected
  const generateAutoNumber = () => {
    const randomNumber = Math.floor(
      1000000 + Math.random() * 9000000
    ).toString();
    setAutoGeneratedNumber(randomNumber);
  };

  // Handle prefix selection
  const handlePrefixSelect = (prefixName: string) => {
    setSelectedPrefix(prefixName);
    generateAutoNumber();
  };

  // Validate productFor according to backend logic
  const validateProductFor = (newProductFor: string[]): string => {
    if (new Set(newProductFor).size !== newProductFor.length) {
      return "Duplicate values are not allowed";
    }

    return "";
  };

  const handleProductForChange = (value: string, checked: boolean) => {
    let newProductFor: string[];

    if (checked) {
      // If selecting 'male' or 'female'
      if (value === "male" || value === "female") {
        // Remove unisex if present (since we're selecting specific gender)
        const currentWithoutUnisex = productFor.filter(
          (item) => item !== "unisex"
        );

        // Add the new selection
        const updatedSelection = [...currentWithoutUnisex, value];

        // Check if both male and female are now selected
        if (
          updatedSelection.includes("male") &&
          updatedSelection.includes("female")
        ) {
          // Replace both male and female with unisex
          const hasKids = updatedSelection.includes("kids");
          newProductFor = hasKids ? ["unisex", "kids"] : ["unisex"];
        } else {
          // Keep the individual selection
          newProductFor = updatedSelection;
        }
      }
      // If selecting 'unisex' directly
      else if (value === "unisex") {
        // Remove male and female, keep kids if present
        const withoutGenders = productFor.filter(
          (item) => item !== "male" && item !== "female"
        );
        newProductFor = [...withoutGenders, "unisex"];
      }
      // If selecting 'kids', add it to existing selections
      else if (value === "kids") {
        newProductFor = productFor.includes(value)
          ? productFor
          : [...productFor, value];
      }
      // Default case
      else {
        newProductFor = productFor.includes(value)
          ? productFor
          : [...productFor, value];
      }
    } else {
      // When unchecking any option, simply remove it
      newProductFor = productFor.filter((item) => item !== value);
    }

    // Validate the new selection
    const error = validateProductFor(newProductFor);
    setProductForError(error);

    // Update state
    setProductFor(newProductFor);
  };

  // Handle category selection
  const handleCategorySelect = (categoryName: string) => {
    const selectedCat = categoryData.find((cat) => cat.name === categoryName);
    if (selectedCat) {
      setSelectedCategory(categoryName);
      setSelectedCategoryId(selectedCat._id);
    }
  };

  // Handle sub category selection
  const handleSubCategorySelect = (subCategoryName: string) => {
    const selectedSubCat = subCategoryData.find(
      (subCat) => subCat.name === subCategoryName
    );
    if (selectedSubCat) {
      setSelectedSubCategoryId(selectedSubCat._id);
    }
  };

  // Handle dropdown selections
  const handleStyleSelect = (styleName: string) => {
    const selectedStyleObj = styleData.find(
      (style) => style.name === styleName
    );
    if (selectedStyleObj) {
      setStyle(styleName); // Keep for display
      setSelectedStyleId(selectedStyleObj._id); // Store ID for API
    }
  };

  const handleGoldCategorySelect = (goldCategoryName: string) => {
    const selectedGoldCategoryObj = goldCategoryData.find(
      (goldCat) => goldCat.name === goldCategoryName
    );
    if (selectedGoldCategoryObj) {
      setGoldCategory(goldCategoryName); // Keep for display
      setSelectedGoldCategoryId(selectedGoldCategoryObj._id); // Store ID for API
    }
  };

  useEffect(() => {
    fetchSkuPrefixes();
    fetchCategories();
    fetchSubCategories();
    fetchAllItems();
    fetchStyles();
    fetchGoldCategories();
    // Fetch items on component mount
  }, []);

  useEffect(() => {
    if (!canCreate) {
      toast.error("You don't have permission to add item");
    }
  }, [canCreate]);

  // Handle click outside to close modals
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (
        categoryModalRef.current &&
        !categoryModalRef.current.contains(event.target as Node) &&
        isCategoryModalOpen
      ) {
        setIsCategoryModalOpen(false);
      }

      if (
        subCategoryModalRef.current &&
        !subCategoryModalRef.current.contains(event.target as Node) &&
        isSubCategoryModalOpen
      ) {
        setIsSubCategoryModalOpen(false);
      }
      if (
        styleModalRef.current &&
        !styleModalRef.current.contains(event.target as Node) &&
        isStyleModalOpen
      ) {
        setIsStyleModalOpen(false);
      }
      if (
        goldCategoryModalRef.current &&
        !goldCategoryModalRef.current.contains(event.target as Node) &&
        isGoldCategoryModalOpen
      ) {
        setIsGoldCategoryModalOpen(false);
      }
    }

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [
    isCategoryModalOpen,
    isSubCategoryModalOpen,
    isStyleModalOpen,
    isGoldCategoryModalOpen,
  ]);

  // Close modals when ESC key is pressed
  useEffect(() => {
    const handleEsc = (event: KeyboardEvent) => {
      if (event.key === "Escape") {
        setIsCategoryModalOpen(false);
        setIsSubCategoryModalOpen(false);
        setIsStyleModalOpen(false);
        setIsGoldCategoryModalOpen(false);
      }
    };
    window.addEventListener("keydown", handleEsc);

    return () => {
      window.removeEventListener("keydown", handleEsc);
    };
  }, []);

  // Prevent body scroll when modal is open
  useEffect(() => {
    if (isCategoryModalOpen || isSubCategoryModalOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "auto";
    }

    return () => {
      document.body.style.overflow = "auto";
    };
  }, [
    isCategoryModalOpen,
    isSubCategoryModalOpen,
    isStyleModalOpen,
    isGoldCategoryModalOpen,
  ]);

  interface Column {
    header: string;
    accessor: string;
    type?: "text" | "image" | "status" | "actions";
  }

  const columns: Column[] = [
    { header: "S.No", accessor: "sno", type: "text" },
    { header: "SKU", accessor: "sku", type: "text" },
    { header: "Barcode", accessor: "Barcode", type: "text" },
    { header: "Unit Type", accessor: "unitType", type: "text" },
    { header: "Image", accessor: "categoryImage", type: "image" },
    { header: "Product For", accessor: "productFor", type: "text" },
    { header: "Category", accessor: "category", type: "text" },
    { header: "Sub Category", accessor: "subCategory", type: "text" },
    { header: "Style", accessor: "style", type: "text" },
    // { header: "Gold Ctg", accessor: "goldCTG", type: "text" },
    // { header: "Diamond Weight", accessor: "diamondWeight", type: "text" },
    // { header: "Gold Weight", accessor: "goldWeight", type: "text" },
    // { header: "Length", accessor: "length", type: "text" },
    // { header: "MM", accessor: "mm", type: "text" },
    // { header: "Size", accessor: "size", type: "text" },
    { header: "Search Tag", accessor: "searchTag", type: "text" },
    { header: "Actions", accessor: "actions", type: "actions" },
  ];

  const generateBarcode = () => {
    const randomBarcode = Math.floor(
      10000000 + Math.random() * 90000000
    ).toString();
    setBarcode(randomBarcode);
  };

  const { Dragger } = Upload;
  const props: UploadProps = {
    name: "file",
    multiple: true,
    // action: "https://660d2bd96ddfa2943b33731c.mockapi.io/api/upload",
    onChange(info) {
      const { status } = info.file;
      if (status !== "uploading") {
        console.log(info.file, info.fileList);
      }
      if (status === "done") {
        message.success(`${info.file.name} file uploaded successfully.`);
      } else if (status === "error") {
        message.error(`${info.file.name} file upload failed.`);
      }
    },
    onDrop(e) {
      console.log("Dropped files", e.dataTransfer.files);
    },
  };

  const addSearchTag = () => {
    if (searchTagInput && !searchTags.includes(searchTagInput)) {
      setSearchTags([...searchTags, searchTagInput]);
      setSearchTagInput("");
    }
  };

  const removeSearchTag = (tag: string) => {
    setSearchTags(searchTags.filter((t) => t !== tag));
  };

  const featuredProps: UploadProps = {
    name: "file",
    // action: "https://660d2bd96ddfa2943b33731c.mockapi.io/api/upload",
    showUploadList: false,
    maxCount: 1,
    onChange(info) {
      const file = info.file;
      console.log("file", file);

      if (file.status === "done") {
        message.success(`${file.name} uploaded successfully`);
        setImage(file);
        setStatus("success");
      } else if (file.status === "error") {
        message.error(`${file.name} upload failed`);
        setImage(file);
        setStatus("success");
      }
    },
  };

  const handleRemove = () => {
    setImage(null);
    setStatus(null);
  };

  // Handle Add Category
  const handleAddCategory = async () => {
    if (!newCategory.trim()) {
      toast.error("Category name is required");
      return;
    }

    try {
      const token = getAuthToken();
      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const payload = {
        name: newCategory,
        description: "",
      };

      const response = await axios.post(
        `${API_URL}/api/abid-jewelry-ms/addCategory`,
        payload,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data.success) {
        toast.success("Category added successfully!");
        setNewCategory("");
        setIsCategoryModalOpen(false);
        fetchCategories();
      } else {
        toast.error(response.data.message || "Failed to add category");
      }
    } catch (error) {
      console.error("Error adding category:", error);
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          toast.error("Network error. Please check your internet connection.");
        } else {
          toast.error(error.response.data.message || "Failed to add category");
        }
      } else {
        toast.error("An unexpected error occurred while adding category");
      }
    }
  };

  // Handle Add Sub Category
  const handleAddSubCategory = async () => {
    if (!newSubCategory.trim()) {
      toast.error("Sub-category name is required");
      return;
    }
    if (!selectedCategory) {
      toast.error("Please select a category");
      return;
    }

    try {
      const token = getAuthToken();
      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const selectedCategoryObj = categoryData.find(
        (cat) => cat.name === selectedCategory
      );
      if (!selectedCategoryObj) {
        toast.error("Selected category not found");
        return;
      }

      const payload = {
        name: newSubCategory,
        category: selectedCategoryObj._id,
      };

      const response = await axios.post(
        `${API_URL}/api/abid-jewelry-ms/addSubCategory`,
        payload,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data.success) {
        toast.success("Sub-category added successfully!");
        setNewSubCategory("");
        setIsSubCategoryModalOpen(false);
        fetchSubCategories();
      } else {
        toast.error(response.data.message || "Failed to add sub-category");
      }
    } catch (error) {
      console.error("Error adding sub-category:", error);
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          toast.error("Network error. Please check your internet connection.");
        } else {
          toast.error(
            error.response.data.message || "Failed to add sub-category"
          );
        }
      } else {
        toast.error("An unexpected error occurred while adding sub-category");
      }
    }
  };

  // Handle Add Style
  const handleAddStyle = async () => {
    if (!newStyle.trim()) {
      toast.error("Style name is required");
      return;
    }

    try {
      const token = getAuthToken();
      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const payload = {
        name: newStyle,
        description: newStyleDescription,
      };

      const response = await axios.post(
        `${API_URL}/api/abid-jewelry-ms/addStyle`,
        payload,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data.success) {
        toast.success("Style added successfully!");
        setNewStyle("");
        setNewStyleDescription("");
        setIsStyleModalOpen(false);
        fetchStyles();
      } else {
        toast.error(response.data.message || "Failed to add style");
      }
    } catch (error) {
      console.error("Error adding style:", error);
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          toast.error("Network error. Please check your internet connection.");
        } else {
          toast.error(error.response.data.message || "Failed to add style");
        }
      } else {
        toast.error("An unexpected error occurred while adding style");
      }
    }
  };

  // Fetch Styles
  const fetchStyles = async () => {
    try {
      const token = getAuthToken();
      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const response = await axios.get(
        `${API_URL}/api/abid-jewelry-ms/getAllStyle`,
        {
          headers: {
            "x-access-token": token,
          },
        }
      );

      if (response.data.success) {
        setStyleData(response.data.data);
        setStyles(response.data.data.map((style: any) => style.name));
      }
    } catch (error) {
      console.error("Error fetching styles:", error);
      toast.error("Failed to fetch styles");
    }
  };

  // Handle Add Gold Category
  const handleAddGoldCategory = async () => {
    if (!newGoldCategory.trim()) {
      toast.error("Gold category name is required");
      return;
    }

    try {
      const token = getAuthToken();
      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const payload = {
        name: newGoldCategory,
        description: newGoldCategoryDescription,
      };

      const response = await axios.post(
        `${API_URL}/api/abid-jewelry-ms/createGoldCategory`,
        payload,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data.success) {
        toast.success("Gold category added successfully!");
        setNewGoldCategory("");
        setNewGoldCategoryDescription("");
        setIsGoldCategoryModalOpen(false);
        fetchGoldCategories();
      } else {
        toast.error(response.data.message || "Failed to add gold category");
      }
    } catch (error) {
      console.error("Error adding gold category:", error);
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          toast.error("Network error. Please check your internet connection.");
        } else {
          toast.error(
            error.response.data.message || "Failed to add gold category"
          );
        }
      } else {
        toast.error("An unexpected error occurred while adding gold category");
      }
    }
  };

  // Fetch Gold Categories
  const fetchGoldCategories = async () => {
    try {
      const token = getAuthToken();
      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const response = await axios.get(
        `${API_URL}/api/abid-jewelry-ms/getAllGoldCategories`,
        {
          headers: {
            "x-access-token": token,
          },
        }
      );

      if (response.data.success) {
        setGoldCategoryData(response.data.data);
        setGoldCategories(
          response.data.data.map((goldCat: any) => goldCat.name)
        );
      }
    } catch (error) {
      console.error("Error fetching gold categories:", error);
      toast.error("Failed to fetch gold categories");
    }
  };

  // Update the gallery upload props to handle multiple files
  const galleryProps: UploadProps = {
    name: "file",
    multiple: true,
    maxCount: 4, // Limit to 4 images
    fileList: galleryImageFiles,
    beforeUpload: (file) => {
      // Prevent auto upload, we'll handle it manually
      return false;
    },
    onChange(info) {
      // Keep only the files, don't upload automatically
      const fileList = info.fileList.slice(-4); // Keep only last 4 files
      setGalleryImageFiles(fileList);
    },
    onRemove: (file) => {
      setGalleryImageFiles((prev) =>
        prev.filter((item) => item.uid !== file.uid)
      );
    },
    onDrop(e) {
      console.log("Dropped files", e.dataTransfer.files);
    },
  };

  // Updated handleCreateItem function
  const handleCreateItem = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!canCreate) {
      toast.error("You don't have permission to add item");
      return;
    }

    // Validate productFor before submission
    const productForValidationError = validateProductFor(productFor);
    if (productForValidationError) {
      toast.error(productForValidationError);
      setProductForError(productForValidationError);
      return;
    }

    setIsLoading(true);
    try {
      const token = getAuthToken();
      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      // Get the selected prefix ID
      const selectedPrefixObj = skuPrefixes.find(
        (prefix) => prefix.prefixName === selectedPrefix
      );
      if (!selectedPrefixObj) {
        toast.error("Please select a prefix");
        return;
      }

      // Create FormData for file upload
      const formData = new FormData();
      formData.append("prefixId", selectedPrefixObj._id);
      formData.append("autoGenerated", autoGeneratedNumber);
      formData.append("barcode", barcode);
      formData.append("unitType", unitType);

      // Add product for values
      productFor.forEach((pf) => {
        formData.append("productFor", pf);
      });

      formData.append("category", selectedCategoryId);
      formData.append("subCategory", selectedSubCategoryId);
      // ✅ Send IDs instead of names
      formData.append("style", selectedStyleId || ""); // Send style ID
      formData.append("goldCategory", selectedGoldCategoryId || ""); // Send gold category ID
      formData.append("diamondWeight", diamondWeight);
      formData.append("goldWeight", goldWeight);
      formData.append("length", length);
      formData.append("mm", mm);
      formData.append("size", size);
      formData.append("searchTag", searchTags.join(","));

      // Add featured image if exists
      if (image && image.originFileObj) {
        formData.append("itemImage", image.originFileObj);
      }

      // Add multiple gallery images (up to 4)
      galleryImageFiles.forEach((file, index) => {
        if (file.originFileObj && index < 4) {
          formData.append("uploadMultipleItemImages", file.originFileObj);
        }
      });

      // Debug: Log the formData contents
      console.log("FormData contents:");
      for (let pair of formData.entries()) {
        console.log(pair[0] + ": " + pair[1]);
      }

      const response = await axios.post(
        `${API_URL}/api/abid-jewelry-ms/createItem`,
        formData,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "multipart/form-data",
          },
        }
      );

      if (response.data.success) {
        toast.success("Item created successfully!");
        // Reset form
        resetForm();
        // Refresh the items list
        fetchAllItems();
      } else {
        toast.error(response.data.message || "Failed to create item");
      }
    } catch (error) {
      console.error("Error creating item:", error);
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          toast.error("Network error. Please check your internet connection.");
        } else {
          toast.error(error.response.data.message || "Failed to create item");
        }
      } else {
        toast.error("An unexpected error occurred while creating item");
      }
    } finally {
      setIsLoading(false);
    }
  };

  // Update the resetForm function to include gallery images
  // const resetForm = () => {
  //   setSelectedPrefix("");
  //   setAutoGeneratedNumber("");
  //   setBarcode("");
  //   setUnitType("piece");
  //   setProductFor([]);
  //   setSelectedCategory("");
  //   setSelectedCategoryId("");
  //   setSelectedSubCategoryId("");
  //   setSelectedStyleId(""); // ✅ Reset style ID
  //   setGoldCategory("");
  //   setSelectedGoldCategoryId(""); // ✅ Reset gold category ID
  //   setDiamondWeight("");
  //   setGoldWeight("");
  //   setLength("");
  //   setMm("");
  //   setSize("");
  //   setSearchTags([]);
  //   setImage(null);
  //   setStatus(null);
  //   setGalleryImageFiles([]); // Reset gallery images
  //   setProductForError(""); // Reset validation error
  // };

  const resetForm = () => {
    setSelectedPrefix("");
    setAutoGeneratedNumber("");
    setBarcode("");
    setUnitType("piece");
    setProductFor([]);
    setSelectedCategory("");
    setSelectedCategoryId("");
    setSelectedSubCategoryId("");
    setSelectedStyleId("");
    setGoldCategory("");
    setSelectedGoldCategoryId("");
    setDiamondWeight("");
    setGoldWeight("");
    setLength("");
    setMm("");
    setSize("");
    setSearchTags([]);
    setImage(null);
    setStatus(null);
    setGalleryImageFiles([]);
    setProductForError("");

    // Reset dropdown keys to force re-render with default values
    setCategoryDropdownKey((prev) => prev + 1);
    setSubCategoryDropdownKey((prev) => prev + 1);
    setStyleDropdownKey((prev) => prev + 1);
    setGoldCategoryDropdownKey((prev) => prev + 1);
    setPrefixDropdownKey((prev) => prev + 1);
  };

  const handleCategoryIconClick = () => {
    console.log("Category plus icon clicked");
    setIsCategoryModalOpen(true);
  };

  const handleSubCategoryIconClick = () => {
    console.log("Sub-category plus icon clicked");
    setIsSubCategoryModalOpen(true);
  };
  const handleStyleIconClick = () => {
    console.log("Sub-category plus icon clicked");
    setIsStyleModalOpen(true);
  };
  const handleGoldCategoryIconClick = () => {
    console.log("Sub-category plus icon clicked");
    setIsGoldCategoryModalOpen(true);
  };

  return (
    <div className="w-full mx-auto px-3 py-6 sm:px-4 md:px-6 xl:px-8 xl:py-6">
      <h1 className="text-2xl font-semibold text-gray-800 mb-6">
        Add Item (Category)
      </h1>

      <div className="bg-white rounded-lg shadow-md p-6 mb-8">
        <form onSubmit={handleCreateItem}>
          <h2 className="mb-4 Source-Sans-Pro-font text-[#056BB7] font-semibold text-[24px]">
            Add Item
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 text-[15px] Poppins-font font-medium">
            {/* Left Column */}
            <div className="space-y-4">
              <div>
                <label
                  htmlFor="sku"
                  className="block mb-1 text-[15px] font-medium"
                >
                  SKU<span className="text-red-500"> *</span>
                </label>
                <div className="flex items-center gap-3 w-full">
                  {/* <Dropdown
                    defaultValue="Prefix"
                    options={skuPrefixes.map((prefix) => prefix.prefixName)}
                    className="w-full"
                    onSelect={handlePrefixSelect}
                    // <UserDropDown
                    // onSelect={handleUserSelect}
                    searchable={true}
                    noResultsMessage="No Prefix found"
                    // DropDownName="Manager"
                    // />
                  /> */}

                  <Dropdown
                    key={prefixDropdownKey}
                    defaultValue="Prefix"
                    options={skuPrefixes.map((prefix) => prefix.prefixName)}
                    className="w-full"
                    onSelect={handlePrefixSelect}
                    searchable={true}
                    noResultsMessage="No Prefix found"
                  />
                  <span>-</span>
                  <div className="w-full">
                    <Input
                      placeholder="Auto Generate"
                      className="w-full"
                      value={autoGeneratedNumber}
                      // readOnly
                    />
                  </div>
                </div>
              </div>

              <div>
                <label
                  htmlFor="unit-type"
                  className="block mt-6 mb-1 text-[15px] font-medium"
                >
                  Unit type <span className="text-red-500"> *</span>
                </label>
                <div className="flex gap-4 mt-2">
                  <div className="flex items-center space-x-2">
                    <input
                      type="radio"
                      id="by-piece"
                      name="unit-type"
                      value="piece"
                      checked={unitType === "piece"}
                      onChange={(e) => setUnitType(e.target.value)}
                      className="w-4 h-4 text-blue-600"
                    />
                    <label htmlFor="by-piece" className="font-normal">
                      By Piece
                    </label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="radio"
                      id="by-weight"
                      name="unit-type"
                      value="weight"
                      checked={unitType === "weight"}
                      onChange={(e) => setUnitType(e.target.value)}
                      className="w-4 h-4 text-blue-600"
                    />
                    <label htmlFor="by-weight" className="font-normal">
                      By Weight
                    </label>
                  </div>
                </div>
              </div>

              <div className="flex flex-col">
                <div className="flex items-center gap-2">
                  <label
                    htmlFor="category"
                    className="block mb-1 text-[15px] font-medium"
                  >
                    Category <span className="text-red-500"> *</span>
                  </label>
                  <div
                    className="cursor-pointer mb-1"
                    onClick={handleCategoryIconClick}
                    style={{ display: "inline-block" }}
                  >
                    <img
                      src={plusIcon || "/placeholder.svg"}
                      alt="Add category"
                      width={16}
                    />
                  </div>
                </div>
                <Dropdown
                  key={categoryDropdownKey}
                  defaultValue="Select Category"
                  options={categories}
                  className="w-full"
                  onSelect={handleCategorySelect}
                  searchable={true}
                  noResultsMessage="No category found"
                />
              </div>

              <div className="flex flex-col">
                <div className="flex items-center gap-2">
                  <label
                    htmlFor="style"
                    className="block mb-1 text-[15px] font-medium"
                  >
                    Style <span className="text-red-500"> *</span>
                  </label>
                  <div
                    className="cursor-pointer mb-1"
                    onClick={handleStyleIconClick}
                    style={{ display: "inline-block" }}
                  >
                    <img
                      src={plusIcon || "/placeholder.svg"}
                      alt="Add sub-category"
                      width={16}
                    />
                  </div>
                </div>
                <Dropdown
                  key={styleDropdownKey}
                  defaultValue="Select Style"
                  options={styles}
                  className="w-full"
                  onSelect={handleStyleSelect}
                  searchable={true}
                  noResultsMessage="No Style found"
                />
              </div>

              <div className="flex flex-col">
                <label
                  htmlFor="diamond-weight"
                  className="block mb-1 text-[15px] font-medium"
                >
                  Diamond Weight
                </label>
                <Input
                  placeholder="eg: 4.5"
                  className="w-full"
                  value={diamondWeight}
                  onChange={(e) => setDiamondWeight(e.target.value)}
                />
              </div>

              <div>
                <label
                  htmlFor="length"
                  className="block mb-1 text-[15px] font-medium"
                >
                  Length
                </label>
                <Input
                  placeholder="eg: 18″"
                  className="w-full"
                  value={length}
                  onChange={(e) => setLength(e.target.value)}
                />
              </div>

              <div>
                <label
                  htmlFor="size"
                  className="block mb-1 text-[15px] font-medium"
                >
                  Size
                </label>
                <Input
                  placeholder="eg: 7"
                  className="w-full"
                  value={size}
                  onChange={(e) => setSize(e.target.value)}
                />
              </div>

              <div className="flex flex-col">
                <div className="flex items-center gap-2">
                  <label
                    htmlFor="search-tag"
                    className="block mb-1 text-[15px] font-medium"
                  >
                    Search Tag <span className="text-red-500"> *</span>
                  </label>
                  <PlusCircle className="h-4 w-4 text-[#056BB7] cursor-pointer" />
                </div>
                <div className="flex flex-row gap-2 mt-2">
                  <div className="w-[80%]">
                    <Input
                      placeholder="Add tag"
                      value={searchTagInput}
                      onChange={(e) => setSearchTagInput(e.target.value)}
                      className="!w-[100%]"
                    />
                  </div>
                  <Button
                    text="Add"
                    className="w-[20%] border-gray-300"
                    onClick={addSearchTag}
                    type="button"
                  />
                </div>

                {searchTags.length > 0 && (
                  <div className="flex flex-wrap gap-2 mt-3">
                    {searchTags.map((tag, index) => (
                      <div
                        key={index}
                        className="flex items-center gap-2 px-4 py-1 rounded-full bg-[#76767633] text-sm text-[#626262]"
                      >
                        <span>{tag}</span>
                        <button
                          type="button"
                          onClick={() => removeSearchTag(tag)}
                          className="flex items-center justify-center w-4 h-4 rounded-full bg-[#626262]"
                        >
                          <X size={11} color="white" />
                        </button>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>

            {/* Right Column */}
            <div className="space-y-4">
              <div>
                <label
                  htmlFor="barcode"
                  className="block mb-1 text-[15px] font-medium"
                >
                  Barcode<span className="text-red-500"> *</span>
                </label>
                <div className="flex w-full items-center border border-gray-300 rounded-md overflow-hidden p-1">
                  <input
                    type="text"
                    id="barcode"
                    placeholder="eg: 23923"
                    value={barcode}
                    onChange={(e) => setBarcode(e.target.value)}
                    className="w-full px-4 py-2 text-sm text-gray-700 placeholder-gray-400 border-none outline-none"
                  />
                  <Button
                    text="Generate"
                    onClick={generateBarcode}
                    type="button"
                    className="bg-[#28A745] text-white text-sm font-semibold px-4 py-2 hover:bg-green-600 transition-colors !border-none"
                  />
                </div>
              </div>

              <div>
                <label className="block mb-1 text-[15px] font-medium">
                  Product For <span className="text-red-500"> *</span>
                </label>
                <div className="flex flex-wrap gap-4 mt-2">
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="male"
                      className="w-4 h-4 text-blue-600 border-gray-300 rounded"
                      checked={productFor.includes("male")}
                      onChange={(e) =>
                        handleProductForChange("male", e.target.checked)
                      }
                    />
                    <label htmlFor="male" className="font-normal">
                      Male
                    </label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="female"
                      className="w-4 h-4 text-blue-600 border-gray-300 rounded"
                      checked={productFor.includes("female")}
                      onChange={(e) =>
                        handleProductForChange("female", e.target.checked)
                      }
                    />
                    <label htmlFor="female" className="font-normal">
                      Female
                    </label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="kids"
                      className="w-4 h-4 text-blue-600 border-gray-300 rounded"
                      checked={productFor.includes("kids")}
                      onChange={(e) =>
                        handleProductForChange("kids", e.target.checked)
                      }
                    />
                    <label htmlFor="kids" className="font-normal">
                      Kids
                    </label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="unisex"
                      className="w-4 h-4 text-blue-600 border-gray-300 rounded"
                      checked={productFor.includes("unisex")}
                      onChange={(e) =>
                        handleProductForChange("unisex", e.target.checked)
                      }
                    />
                    <label htmlFor="unisex" className="font-normal">
                      Unisex
                    </label>
                  </div>
                </div>

                {/* Display validation error for productFor */}
                {productForError && (
                  <p className="text-red-500 text-sm mt-1">{productForError}</p>
                )}

                <div className="flex flex-col mt-3.5">
                  <div className="flex items-center gap-2">
                    <label
                      htmlFor="sub-category"
                      className="block mb-1 text-[15px] font-medium"
                    >
                      Sub Category <span className="text-red-500"> *</span>
                    </label>
                    <div
                      className="cursor-pointer mb-1"
                      onClick={handleSubCategoryIconClick}
                      style={{ display: "inline-block" }}
                    >
                      <img
                        src={plusIcon || "/placeholder.svg"}
                        alt="Add sub-category"
                        width={16}
                      />
                    </div>
                  </div>
                  <Dropdown
                    key={subCategoryDropdownKey}
                    defaultValue="Select Sub Category"
                    options={subCategories}
                    className="w-full"
                    onSelect={handleSubCategorySelect}
                    searchable={true}
                    noResultsMessage="No Sub category found"
                  />
                </div>

                <div className="flex flex-col mt-3.5">
                  <div className="flex items-center gap-2">
                    <label
                      htmlFor="gold-category"
                      className="block mb-1 text-[15px] font-medium"
                    >
                      Gold Category <span className="text-red-500"> *</span>
                    </label>
                    <div
                      className="cursor-pointer mb-1"
                      onClick={handleGoldCategoryIconClick}
                      style={{ display: "inline-block" }}
                    >
                      <img
                        src={plusIcon || "/placeholder.svg"}
                        alt="Add sub-category"
                        width={16}
                      />
                    </div>
                  </div>
                  <Dropdown
                    key={goldCategoryDropdownKey}
                    defaultValue="Select Gold Category"
                    options={goldCategories}
                    className="w-full"
                    onSelect={handleGoldCategorySelect}
                    searchable={true}
                    noResultsMessage="No Gold Category found"
                  />
                </div>

                <div className="mt-3.5">
                  <label
                    htmlFor="gold-weight"
                    className="block mb-1 text-[15px] font-medium"
                  >
                    Gold Weight{" "}
                    <span className="text-sm text-gray-500">(grams)</span>
                  </label>
                  <Input
                    placeholder="eg: 150 gms"
                    className="w-full"
                    value={goldWeight}
                    onChange={(e) => setGoldWeight(e.target.value)}
                  />
                </div>

                <div className="mt-3.5">
                  <label
                    htmlFor="mm"
                    className="block mb-1 text-[15px] font-medium"
                  >
                    MM
                  </label>
                  <Input
                    placeholder="eg: 8mm"
                    className="w-full"
                    value={mm}
                    onChange={(e) => setMm(e.target.value)}
                  />
                </div>

                <div className="w-full mt-3.5">
                  <label className="block mb-2 font-medium text-gray-700 w-full">
                    Featured image <span className="text-red-500"> *</span>
                  </label>

                  <Dragger {...featuredProps} className="w-full" height={40}>
                    <div className="rounded-lg flex items-center justify-between cursor-pointe transition !w-full -mt-2">
                      <span className="text-gray-500">
                        {image ? image.name : "No file chosen"}
                      </span>
                      <CameraOutlined className="text-xl text-gray-400" />
                    </div>
                  </Dragger>

                  {image && (
                    <div className="mt-4 flex items-start justify-between gap-4">
                      <Image
                        width={100}
                        height={100}
                        className=" border border-gray-300"
                        src={
                          image.thumbUrl ||
                          image.url ||
                          (image.originFileObj
                            ? URL.createObjectURL(image.originFileObj)
                            : "")
                        }
                        alt={image.name}
                        style={{ objectFit: "cover", borderRadius: "8px" }}
                      />
                      <div className="flex items-center gap-2">
                        <p
                          className={`font-medium ${
                            status === "success"
                              ? "text-green-600"
                              : status === "error"
                              ? "text-red-600"
                              : "text-gray-500"
                          }`}
                        >
                          Status: {status}
                        </p>
                        <DeleteOutlined
                          onClick={handleRemove}
                          className="text-red-500 text-lg cursor-pointer hover:text-red-700"
                        />
                      </div>
                    </div>
                  )}
                </div>

                <div className="flex flex-col mt-3.5">
                  <label htmlFor="" className="mb-1">
                    Upload Multiple Gallery Image (Max 4)
                  </label>
                  <Dragger
                    {...galleryProps}
                    className="mb-1 w-[320px]"
                    height={170}
                  >
                    <p className="ant-upload-drag-icon ">
                      <InboxOutlined />
                    </p>
                    <p className="ant-upload-text ">
                      Drag and Drop files here (Max 4 images)
                    </p>
                    <p className="ant-upload-hint !text-[#1A8CE0]">
                      or Browse Images
                    </p>
                  </Dragger>

                  {/* Display selected gallery images */}
                  {galleryImageFiles.length > 0 && (
                    <div className="mt-4">
                      <p className="text-sm text-gray-600 mb-2">
                        Selected Images ({galleryImageFiles.length}/4):
                      </p>
                    </div>
                  )}
                </div>

                <div className="flex justify-end gap-4 pt-4">
                  <Button
                    text="Back"
                    type="button"
                    className="px-6 !bg-[#F4F4F5] !border-none"
                  />
                  {canCreate && (
                    <Button
                      text={isLoading ? "Saving..." : "Save"}
                      className={`px-6 !bg-[#056BB7] border-none text-white ${
                        isLoading ? "opacity-70 cursor-not-allowed" : ""
                      }`}
                      type="submit"
                      disabled={isLoading}
                    />
                  )}
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>

      {loading ? (
        <div className="flex justify-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      ) : (
        // <ItemCategoryTable
        //   allItem={true}
        //   className=""
        //   tableDataAlignment="zone"
        //   columns={columns}
        //   data={itemsData}
        //   tableTitle="Item (Category)"
        //   canUpdate={canUpdate}
        //   canDelete={canDelete}
        //   onEdit={(row: any) => setSelectedUser(row)}
        //   onDelete={(row: any) => {
        //     setSelectedUser(row);
        //     setShowDeleteModal(true);
        //   }}
        // />

        <ItemCategoryTable
          allItem={true}
          className=""
          tableDataAlignment="zone"
          columns={columns}
          data={itemsData}
          tableTitle="Item (Category)"
          canUpdate={canUpdate}
          canDelete={canDelete}
          onEdit={(row: any) => setSelectedUser(row)}
          onDelete={handleDeleteItem} // ✅ Now properly connected to the delete function
          AddItemCategoryButton={false}
        />
      )}

      {/* Custom Add Category Modal */}
      {isCategoryModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black/20 z-50">
          <div
            ref={categoryModalRef}
            className="animate-scaleIn bg-white rounded-xl w-full max-w-md relative shadow-lg border-3 border-gray-300"
          >
            <div className="p-6">
              <h3 className="text-xl font-semibold text-[#056BB7] mb-4">
                Add Product Category
              </h3>

              <div className="space-y-4">
                <div className="space-y-2">
                  <label
                    htmlFor="newCategory"
                    className="block text-[15px] font-medium"
                  >
                    Category
                  </label>
                  <Input
                    placeholder="Earrings"
                    value={newCategory}
                    onChange={(e) => setNewCategory(e.target.value)}
                    className="w-full"
                  />
                </div>

                <div className="flex justify-end">
                  <Button
                    text="Add Product Category"
                    onClick={handleAddCategory}
                    type="button"
                    className="px-6 !bg-[#056BB7] border-none text-white"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Custom Add Sub-Category Modal */}
      {isSubCategoryModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black/20 z-50">
          <div
            ref={subCategoryModalRef}
            className="animate-scaleIn bg-white rounded-xl w-md md:w-2xl lg:w-3xl relative shadow-lg border-3 border-gray-300"
          >
            <div className="p-6">
              <h3 className="text-xl font-semibold text-[#056BB7] mb-4">
                Add Product Sub-Category
              </h3>

              <div className="space-y-4">
                <div className="grid lg:grid-cols-2 gap-4">
                  <div className="space-y-2 w-full">
                    <label
                      htmlFor="category"
                      className="block text-[15px] font-medium"
                    >
                      Category
                    </label>
                    <div className="!w-full">
                      <Dropdown
                        defaultValue={"Select Category"}
                        options={categories}
                        className="w-full"
                        onSelect={(value) => setSelectedCategory(value)}
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label
                      htmlFor="newSubCategory"
                      className="block text-[15px] font-medium"
                    >
                      Sub-Category
                    </label>
                    <Input
                      placeholder="Product For Field Name"
                      value={newSubCategory}
                      onChange={(e) => setNewSubCategory(e.target.value)}
                      className="w-full"
                    />
                  </div>
                </div>

                <div className="flex justify-end">
                  <Button
                    text="Add Product Sub Category"
                    onClick={handleAddSubCategory}
                    type="button"
                    className="px-6 !bg-[#056BB7] border-none text-white"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      {isStyleModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black/20 z-50">
          <div
            ref={styleModalRef}
            className="animate-scaleIn bg-white rounded-xl w-md md:w-2xl lg:w-3xl relative shadow-lg border-3 border-gray-300"
          >
            <div className="p-6">
              <h3 className="text-xl font-semibold text-[#056BB7] mb-4">
                Add Style
              </h3>

              <div className="space-y-4">
                <div className="grid lg:grid-cols-1 gap-4">
                  <div className="space-y-2 w-full">
                    <label
                      htmlFor="category"
                      className="block text-[15px] font-medium"
                    >
                      Style
                    </label>
                    <div className="!w-full">
                      <Input
                        placeholder="Enter Style"
                        value={newStyle}
                        onChange={(e) => setNewStyle(e.target.value)}
                        className="w-full"
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label
                      htmlFor="newSubCategory"
                      className="block text-[15px] font-medium"
                    >
                      Description
                    </label>

                    <textarea
                      value={newStyleDescription}
                      onChange={(e) => setNewStyleDescription(e.target.value)}
                      placeholder="Style description"
                      rows={4}
                      className="Poppins-font font-medium w-full px-4 py-2 border border-gray-300 rounded-md text-sm !focus:outline-none outline-none resize-none"
                    ></textarea>
                  </div>
                </div>

                <div className="flex justify-end">
                  <Button
                    text="Add Style"
                    onClick={handleAddStyle}
                    type="button"
                    className="px-6 !bg-[#056BB7] border-none text-white"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      {isGoldCategoryModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black/20 z-50">
          <div
            ref={goldCategoryModalRef}
            className="animate-scaleIn bg-white rounded-xl w-md md:w-2xl lg:w-3xl relative shadow-lg border-3 border-gray-300"
          >
            <div className="p-6">
              <h3 className="text-xl font-semibold text-[#056BB7] mb-4">
                Add Gold Category
              </h3>

              <div className="space-y-4">
                <div className="grid lg:grid-cols-1 gap-4">
                  <div className="space-y-2 w-full">
                    <label
                      htmlFor="category"
                      className="block text-[15px] font-medium"
                    >
                      Gold Category
                    </label>
                    <div className="!w-full">
                      <Input
                        placeholder="Enter Gold Category" // ✅ Correct placeholder
                        value={newGoldCategory} // ✅ Correct state variable
                        onChange={(e) => setNewGoldCategory(e.target.value)} // ✅ Correct setter
                        className="w-full"
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label
                      htmlFor="newSubCategory"
                      className="block text-[15px] font-medium"
                    >
                      Description
                    </label>

                    <textarea
                      value={newGoldCategoryDescription} // ✅ Correct state variable
                      onChange={(e) =>
                        setNewGoldCategoryDescription(e.target.value)
                      } // ✅ Correct setter
                      placeholder="Gold Category description"
                      rows={4}
                      className="Poppins-font font-medium w-full px-4 py-2 border border-gray-300 rounded-md text-sm !focus:outline-none outline-none resize-none"
                    ></textarea>
                  </div>
                </div>

                <div className="flex justify-end">
                  <Button
                    text="Add Gold Category"
                    onClick={handleAddGoldCategory}
                    type="button"
                    className="px-6 !bg-[#056BB7] border-none text-white"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
