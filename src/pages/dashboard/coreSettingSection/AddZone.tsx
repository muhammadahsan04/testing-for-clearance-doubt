// import type React from "react";
// import { useState, useEffect } from "react";
// import { useNavigate } from "react-router-dom";
// import axios from "axios";
// import { toast } from "react-toastify";
// import Input from "../../../components/Input";
// import Button from "../../../components/Button";
// import plusIcon from "../../../assets/plus.svg";
// import ZoneRepresentativeDropDown from "../../../components/ZoneRepresentativeDropDown";
// import StoreDropDown from "../../../components/StoreDropDown";
// import ZoneTable from "../../../components/ZoneTable";
// import { hasPermission } from "../sections/CoreSettings";
// import type { UploadFile, UploadProps } from "antd";
// import { Image, message, Upload } from "antd";
// import AddStoreDropDown from "../../../components/AddStoreDropDown";
// import ManagerDropDown from "../../../components/ManagerDropDown";
// import { FaFacebook } from "react-icons/fa";
// import { AiFillInstagram } from "react-icons/ai";
// import { BiLogoLinkedinSquare } from "react-icons/bi";
// import { FiUpload } from "react-icons/fi";
// import { DeleteOutlined, InboxOutlined } from "@ant-design/icons";

// // Helper function to get user role
// const getUserRole = () => {
//   let role = localStorage.getItem("role");
//   if (!role) {
//     role = sessionStorage.getItem("role");
//   }
//   return role;
// };

// // Helper function to get auth token
// const getAuthToken = () => {
//   let token = localStorage.getItem("token");
//   if (!token) {
//     token = sessionStorage.getItem("token");
//   }
//   return token;
// };

// interface ZoneData {
//   id: string;
//   name: string;
//   status: string;
//   _id: string;
//   zoneId?: string;
// }

// interface Column {
//   header: string;
//   accessor: string;
//   type?: "text" | "image" | "status" | "actions";
// }

// interface ZoneDetail {
//   _id: string;
//   zoneId: string;
//   name: string;
//   location: string;
//   address: string;
//   phoneNumber: string;
//   status: string;
//   zoneRepresentative: Array<{
//     _id: string;
//     firstName: string;
//     lastName: string;
//   }>;
//   stores: Array<{
//     _id: string;
//     storeName: string;
//   }>;
// }

// const AddZone: React.FC = () => {
//   const navigate = useNavigate();
//   const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
//   const [zoneData, setZoneData] = useState<ZoneData[]>([]);
//   const [loading, setLoading] = useState<boolean>(true);
//   const [selectedZone, setSelectedZone] = useState<ZoneDetail | null>(null);
//   const [loadingZoneDetails, setLoadingZoneDetails] = useState<boolean>(false);

//   // Add these state variables inside AddZone component
//   const [isAddStoreModalOpen, setIsAddStoreModalOpen] = useState(false);
//   const [prefixData, setPrefixData] = useState<any[]>([]);
//   const [selectedPrefix, setSelectedPrefix] = useState<string>("Prefix");
//   const [autoGeneratedId, setAutoGeneratedId] = useState<string>("");
//   const [prefixIdMap, setPrefixIdMap] = useState<Record<string, string>>({});
//   const [isLoadingData, setIsLoadingData] = useState<boolean>(false);

//   // Permission variables add
//   const userRole = getUserRole();
//   const isAdmin = userRole === "Admin" || userRole === "SuperAdmin";
//   const canCreate = isAdmin || hasPermission("Core Setting", "create");
//   const canUpdate = isAdmin || hasPermission("Core Setting", "update");
//   const canDelete = isAdmin || hasPermission("Core Setting", "delete");

//   // Form state
//   const [formData, setFormData] = useState({
//     name: "",
//     location: "",
//     address: "",
//     phoneNumber: "",
//     zoneRepresentative: [] as string[],
//     stores: [] as string[],
//     status: "active",
//   });

//   const columns: Column[] = [
//     { header: "S.no", accessor: "id" },
//     { header: "Zone Name", accessor: "name", type: "text" },
//     { header: "Store Name", accessor: "store", type: "text" },
//     { header: "Status", accessor: "status", type: "status" },
//     { header: "Actions", accessor: "actions", type: "actions" },
//   ];

//   // Store form data
//   const [storeFormData, setStoreFormData] = useState({
//     storeName: "",
//     location: "",
//     managerId: "",
//     phoneNumber: "",
//     email: "",
//     status: "active",
//     facebookLink: "",
//     instagramLink: "",
//     linkedinLink: "",
//     selectedPrefixId: "",
//   });

//   // For store logo and images
//   const [storeLogo, setStoreLogo] = useState<UploadFile | null>(null);
//   const [storeImage, setStoreImage] = useState<UploadFile[]>([]);
//   const [storeLogoStatus, setStoreLogoStatus] = useState<
//     "success" | "error" | null
//   >(null);
//   const [storeImageStatus, setStoreImageStatus] = useState<
//     "success" | "error" | null
//   >(null);

//   // Selected names for display purposes
//   const [selectedRepNames, setSelectedRepNames] = useState<string[]>([]);
//   const [selectedStoreNames, setSelectedStoreNames] = useState<string[]>([]);
//   const [selectedUser, setSelectedUser] = useState(null);
//   const [showDeleteModal, setShowDeleteModal] = useState(false);
//   const [deleteModal, setDeleteModal] = useState(false);
//   const [refreshKey, setRefreshKey] = useState(0);
//   const [isSubCategoryModalOpen, setIsSubCategoryModalOpen] = useState(false);
//   const [zoneRepDropdownKey, setZoneRepDropdownKey] = useState(0);
//   const [storeDropdownKey, setStoreDropdownKey] = useState(0);

//   const fetchZones = async () => {
//     try {
//       const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
//       const token = getAuthToken();

//       if (!token) {
//         toast.error("Authentication token not found. Please login again.");
//         return;
//       }

//       const response = await axios.get(
//         `${API_URL}/api/abid-jewelry-ms/getAllZones`,
//         {
//           headers: {
//             "x-access-token": token,
//             "Content-Type": "application/json",
//           },
//         }
//       );

//       if (response.data.success) {
//         console.log("response.data.data", response.data.data);

//         const formattedData = response.data.data.map((zone: any) => ({
//           id: zone._id.substring(0, 5),
//           _id: zone._id,
//           zoneId: zone.zoneId,
//           name: zone.name,
//           store: zone.stores.map((s: any) => s.storeName).join(", "),
//           status: zone.status.charAt(0).toUpperCase() + zone.status.slice(1),
//         }));

//         setZoneData(formattedData);
//       } else {
//         toast.error(response.data.message || "Failed to fetch zones");
//       }
//     } catch (error) {
//       console.error("Error fetching zones:", error);
//       if (axios.isAxiosError(error)) {
//         if (!error.response) {
//           toast.error("Network error. Please check your internet connection.");
//         } else {
//           toast.error(error.response.data.message || "Failed to fetch zones");
//         }
//       } else {
//         toast.error("An unexpected error occurred while fetching zones");
//       }
//     } finally {
//       setLoading(false);
//     }
//   };

//   // FIXED: Simplified refresh function - only refresh when needed
//   const handleRefresh = () => {
//     setRefreshKey((prev) => prev + 1);
//     fetchZones();
//   };

//   // Check permissions on component mount
//   useEffect(() => {
//     if (!canCreate) {
//       toast.error("You don't have permission to add zones");
//     }
//   }, [canCreate]);

//   // Fetch zones data
//   useEffect(() => {
//     fetchZones();
//   }, []);

//   // Fetch zone details when a row is clicked
//   const fetchZoneDetails = async (zoneId: string) => {
//     setLoadingZoneDetails(true);
//     try {
//       const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
//       const token = getAuthToken();

//       if (!token) {
//         toast.error("Authentication token not found. Please login again.");
//         return;
//       }

//       const response = await axios.get(
//         `${API_URL}/api/abid-jewelry-ms/getOneZone/${zoneId}`,
//         {
//           headers: {
//             "x-access-token": token,
//             "Content-Type": "application/json",
//           },
//         }
//       );

//       if (response.data.success) {
//         setSelectedZone(response.data.data);
//       } else {
//         toast.error(response.data.message || "Failed to fetch zone details");
//       }
//     } catch (error) {
//       console.error("Error fetching zone details:", error);
//       if (axios.isAxiosError(error)) {
//         if (!error.response) {
//           toast.error("Network error. Please check your internet connection.");
//         } else {
//           toast.error(
//             error.response.data.message || "Failed to fetch zone details"
//           );
//         }
//       } else {
//         toast.error("An unexpected error occurred while fetching zone details");
//       }
//     } finally {
//       setLoadingZoneDetails(false);
//     }
//   };

//   // Handle row click to show zone details
//   const handleRowClick = (row: ZoneData) => {
//     if (row._id) {
//       fetchZoneDetails(row._id);
//     }
//   };

//   // FIXED: Handle user selection without unnecessary re-renders
//   const handleUserSelect = (userId: string, userName: string) => {
//     // Check if the user is already selected
//     if (!formData.zoneRepresentative.includes(userId)) {
//       setFormData((prev) => ({
//         ...prev,
//         zoneRepresentative: [...prev.zoneRepresentative, userId],
//       }));
//       setSelectedRepNames((prev) => [...prev, userName]);
//       // DON'T reset dropdown key here - it causes unnecessary re-renders
//     } else {
//       toast.info("This representative is already selected");
//     }
//   };

//   // FIXED: Handle store selection without unnecessary re-renders
//   const handleStoreSelect = (storeId: string, storeName: string) => {
//     // Check if the store is already selected
//     if (!formData.stores.includes(storeId)) {
//       setFormData((prev) => ({
//         ...prev,
//         stores: [...prev.stores, storeId],
//       }));
//       setSelectedStoreNames((prev) => [...prev, storeName]);
//       // DON'T reset dropdown key here - it causes unnecessary re-renders
//     } else {
//       toast.info("This store is already selected");
//     }
//   };

//   // FIXED: Remove representative without triggering API calls
//   const removeRepresentative = (index: number) => {
//     const newRepresentatives = formData.zoneRepresentative.filter(
//       (_, i) => i !== index
//     );
//     const newRepNames = selectedRepNames.filter((_, i) => i !== index);

//     setFormData((prev) => ({
//       ...prev,
//       zoneRepresentative: newRepresentatives,
//     }));
//     setSelectedRepNames(newRepNames);

//     // DON'T reset dropdown key here - it causes unnecessary API calls
//   };

//   // FIXED: Remove store without triggering API calls
//   const removeStore = (index: number) => {
//     const newStores = formData.stores.filter((_, i) => i !== index);
//     const newStoreNames = selectedStoreNames.filter((_, i) => i !== index);

//     setFormData((prev) => ({
//       ...prev,
//       stores: newStores,
//     }));
//     setSelectedStoreNames(newStoreNames);

//     // DON'T reset dropdown key here - it causes unnecessary API calls
//   };

//   // Handle input changes
//   const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
//     const { name, value } = e.target;
//     setFormData((prev) => ({
//       ...prev,
//       [name]: value,
//     }));
//   };

//   // FIXED: Handle form submission without unnecessary API calls
//   const handleSubmit = async (e: React.FormEvent) => {
//     e.preventDefault();

//     // Check permissions before submitting
//     if (!canCreate) {
//       toast.error("You don't have permission to add zones");
//       return;
//     }

//     if (!formData.name) {
//       toast.error("Zone name is required");
//       return;
//     }

//     if (!formData.location) {
//       toast.error("Location is required");
//       return;
//     }

//     if (formData.zoneRepresentative.length === 0) {
//       toast.error("At least one zone representative is required");
//       return;
//     }

//     setIsSubmitting(true);

//     try {
//       const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
//       const token = getAuthToken();

//       if (!token) {
//         toast.error("Authentication token not found. Please login again.");
//         return;
//       }

//       const response = await axios.post(
//         `${API_URL}/api/abid-jewelry-ms/createZone`,
//         formData,
//         {
//           headers: {
//             "x-access-token": token,
//             "Content-Type": "application/json",
//           },
//         }
//       );

//       if (response.data.success) {
//         toast.success("Zone created successfully!");

//         // Update local state with new zone
//         const newZone = {
//           id: response.data.data._id.substring(0, 5),
//           _id: response.data.data._id,
//           zoneId: response.data.data.zoneId,
//           name: response.data.data.name,
//           store:
//             response.data.data.stores
//               ?.map((s: any) => s.storeName)
//               .join(", ") || "",
//           status:
//             response.data.data.status.charAt(0).toUpperCase() +
//             response.data.data.status.slice(1),
//         };
//         setZoneData((prev) => [...prev, newZone]);

//         // Reset form
//         setFormData({
//           name: "",
//           location: "",
//           address: "",
//           phoneNumber: "",
//           zoneRepresentative: [],
//           stores: [],
//           status: "active",
//         });
//         setSelectedRepNames([]);
//         setSelectedStoreNames([]);

//         // ONLY reset dropdown keys after successful form submission
//         setZoneRepDropdownKey((prev) => prev + 1);
//         setStoreDropdownKey((prev) => prev + 1);
//         await fetchZones();
//         // DON'T call fetchZones() here - we already updated the local state
//       } else {
//         toast.error(response.data.message || "Failed to create zone");
//       }
//     } catch (error) {
//       console.error("Error creating zone:", error);
//       if (axios.isAxiosError(error)) {
//         if (!error.response) {
//           toast.error("Network error. Please check your internet connection.");
//         } else {
//           toast.error(error.response.data.message || "Failed to create zone");
//         }
//       } else {
//         toast.error("An unexpected error occurred while creating zone");
//       }
//     } finally {
//       setIsSubmitting(false);
//     }
//   };

//   // Handle zone deletion
//   const handleDeleteZone = async (row: ZoneData) => {
//     try {
//       const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
//       const token = getAuthToken();

//       if (!token) {
//         toast.error("Authentication token not found. Please login again.");
//         return;
//       }

//       const response = await axios.delete(
//         `${API_URL}/api/abid-jewelry-ms/deleteZone/${row._id}`,
//         {
//           headers: {
//             "x-access-token": token,
//             "Content-Type": "application/json",
//           },
//         }
//       );

//       if (response.data.success) {
//         toast.success("Zone deleted successfully!");
//         // Remove the deleted zone from the list
//         setZoneData(zoneData.filter((zone) => zone._id !== row._id));
//       } else {
//         toast.error(response.data.message || "Failed to delete zone");
//       }
//     } catch (error) {
//       console.error("Error deleting zone:", error);
//       if (axios.isAxiosError(error)) {
//         if (!error.response) {
//           toast.error("Network error. Please check your internet connection.");
//         } else {
//           toast.error(error.response.data.message || "Failed to delete zone");
//         }
//       } else {
//         toast.error("An unexpected error occurred while deleting zone");
//       }
//     }
//   };

//   // Add this function to handle zone updates
//   const handleZoneUpdate = (updatedZone: ZoneData) => {
//     // Update the zoneData state with the updated zone
//     setZoneData((prevZoneData) =>
//       prevZoneData.map((zone) =>
//         zone._id === updatedZone._id ? updatedZone : zone
//       )
//     );
//   };

//   // Function to fetch all prefixes
//   const fetchPrefixes = async () => {
//     setIsLoadingData(true);
//     try {
//       const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
//       const token = getAuthToken();
//       if (!token) {
//         toast.error("Authentication token not found. Please login again.");
//         return;
//       }
//       const response = await axios.get(
//         `${API_URL}/api/abid-jewelry-ms/getAllStorePrefix`,
//         {
//           headers: {
//             "x-access-token": token,
//             "Content-Type": "application/json",
//           },
//         }
//       );
//       const data = response.data;
//       if (data.success && Array.isArray(data.data)) {
//         // Map the API response to our table format
//         const mappedData = data.data.map((prefix: any) => ({
//           id: prefix._id,
//           name: prefix.prefixName,
//           status: prefix.status || "active",
//           _id: prefix._id,
//         }));
//         setPrefixData(mappedData);
//       } else {
//         toast.warning("No prefixes found or invalid response format");
//       }
//     } catch (error) {
//       console.error("Error fetching prefixes:", error);
//       if (axios.isAxiosError(error)) {
//         if (!error.response) {
//           toast.error("Network error. Please check your internet connection.");
//         } else {
//           toast.error(
//             error.response.data.message || "Failed to fetch prefixes"
//           );
//         }
//       } else {
//         toast.error("An unexpected error occurred while fetching prefixes");
//       }
//     } finally {
//       setIsLoadingData(false);
//     }
//   };

//   const handleSubCategoryIconClick = () => {
//     console.log("Add store icon clicked");
//     setIsAddStoreModalOpen(true);
//     fetchPrefixes(); // Fetch prefixes when opening modal
//   };

//   // Add upload props
//   const { Dragger } = Upload;

//   // Store logo upload props
//   const storeLogoProps: UploadProps = {
//     name: "file",
//     showUploadList: false,
//     maxCount: 1,
//     beforeUpload: (file) => {
//       const isJpgOrPng =
//         file.type === "image/jpeg" || file.type === "image/png";
//       if (!isJpgOrPng) {
//         message.error("You can only upload JPG/PNG file!");
//       }
//       const isLt5M = file.size / 1024 / 1024 < 5;
//       if (!isLt5M) {
//         message.error("Image must be smaller than 5MB!");
//       }

//       if (isJpgOrPng && isLt5M) {
//         setStoreLogo({
//           ...file,
//           status: "done",
//           url: URL.createObjectURL(file),
//           thumbUrl: URL.createObjectURL(file),
//           originFileObj: file,
//         } as UploadFile);
//         setStoreLogoStatus("success");
//       }
//       return false;
//     },
//   };

//   // Store image upload props
//   const storeImageProps: UploadProps = {
//     name: "file",
//     multiple: false,
//     beforeUpload: (file) => {
//       const isValidFile = file.size / 1024 / 1024 < 5;
//       if (!isValidFile) {
//         message.error("File must be smaller than 5MB!");
//         return false;
//       }

//       setStoreImage((prev) => {
//         const newFile = {
//           ...file,
//           status: "done",
//           url: URL.createObjectURL(file),
//           thumbUrl: URL.createObjectURL(file),
//           originFileObj: file,
//           uid: Date.now().toString(),
//         } as UploadFile;
//         return [...prev, newFile];
//       });
//       setStoreImageStatus("success");
//       return false;
//     },
//     onRemove: (file) => {
//       setStoreImage((prev) => prev.filter((item) => item.uid !== file.uid));
//       if (storeImage.length <= 1) {
//         setStoreImageStatus(null);
//       }
//       return true;
//     },
//     fileList: storeImage,
//   };

//   // Handle remove logo
//   const handleRemoveLogo = () => {
//     setStoreLogo(null);
//     setStoreLogoStatus(null);
//   };

//   // Handle store form submission
//   const handleStoreSubmit = async (e: React.FormEvent) => {
//     e.preventDefault();

//     if (!storeFormData.selectedPrefixId) {
//       toast.error("Please select a prefix");
//       return;
//     }

//     if (!autoGeneratedId) {
//       toast.error("Store ID is required");
//       return;
//     }

//     if (!storeFormData.storeName) {
//       toast.error("Store name is required");
//       return;
//     }

//     if (!storeFormData.managerId) {
//       toast.error("Manager selection is required");
//       return;
//     }

//     if (!storeLogo) {
//       toast.error("Store logo is required");
//       return;
//     }

//     if (storeImage.length === 0) {
//       toast.error("Store image is required");
//       return;
//     }

//     setIsSubmitting(true);

//     try {
//       const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
//       const token = getAuthToken();

//       if (!token) {
//         toast.error("Authentication token not found. Please login again.");
//         return;
//       }

//       const socialMediaLinks = [
//         storeFormData.facebookLink,
//         storeFormData.instagramLink,
//         storeFormData.linkedinLink,
//       ].filter((link) => link !== "");

//       const formDataToSend = new FormData();
//       formDataToSend.append("prefixId", storeFormData.selectedPrefixId);
//       formDataToSend.append("autoGenerated", autoGeneratedId);
//       formDataToSend.append("storeName", storeFormData.storeName);
//       formDataToSend.append("location", storeFormData.location);
//       formDataToSend.append("phoneNumber", storeFormData.phoneNumber);
//       formDataToSend.append("email", storeFormData.email);
//       formDataToSend.append("status", storeFormData.status);
//       formDataToSend.append("managerId", storeFormData.managerId);

//       socialMediaLinks.forEach((link, index) => {
//         formDataToSend.append(`socialMediaLinks[${index}]`, link);
//       });

//       if (storeLogo && storeLogo.originFileObj) {
//         formDataToSend.append("storeLogo", storeLogo.originFileObj);
//       }

//       storeImage.forEach((file, index) => {
//         if (file.originFileObj) {
//           formDataToSend.append("storeImage", file.originFileObj);
//         }
//       });

//       const response = await axios.post(
//         `${API_URL}/api/abid-jewelry-ms/createShop`,
//         formDataToSend,
//         {
//           headers: {
//             "x-access-token": token,
//             "Content-Type": "multipart/form-data",
//           },
//         }
//       );

//       if (response.data.success) {
//         toast.success("Store created successfully!");
//         setIsAddStoreModalOpen(false);
//         // Reset form
//         setStoreFormData({
//           storeName: "",
//           location: "",
//           managerId: "",
//           phoneNumber: "",
//           email: "",
//           status: "active",
//           facebookLink: "",
//           instagramLink: "",
//           linkedinLink: "",
//           selectedPrefixId: "",
//         });
//         setStoreLogo(null);
//         setStoreImage([]);
//         setAutoGeneratedId("");
//         setSelectedPrefix("Prefix");
//         // Only refresh if needed - store creation doesn't affect zone data
//       } else {
//         toast.error(response.data.message || "Failed to create store");
//       }
//     } catch (error) {
//       console.error("Error creating store:", error);
//       if (axios.isAxiosError(error)) {
//         toast.error(error.response?.data?.message || "Failed to create store");
//       } else {
//         toast.error("An unexpected error occurred while creating store");
//       }
//     } finally {
//       setIsSubmitting(false);
//     }
//   };

//   return (
//     <div className="w-full mx-auto px-3 py-6 sm:px-4 md:px-6 xl:px-8 xl:py-6">
//       <div className="bg-white rounded-lg shadow-md px-4 md:px-10 py-6 mb-10">
//         <form className="" onSubmit={handleSubmit}>
//           <div className="">
//             {/* Top Side */}
//             <p className="Source-Sans-Pro-font text-[#056BB7] font-semibold text-[24px] m-0">
//               Add New Zone
//             </p>
//             <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-12 lg:gap-16 xl:gap-32 text-[15px] Poppins-font font-medium">
//               {/* Left Side */}
//               <div className="space-y-4">
//                 <div className="flex flex-col">
//                   <label htmlFor="name" className="mb-1">
//                     Zone Name <span className="text-red-500"> *</span>
//                   </label>
//                   <Input
//                     name="name"
//                     placeholder="Zone Name"
//                     className="outline-none focus:outline-none w-full"
//                     value={formData.name}
//                     onChange={handleInputChange}
//                     required
//                   />
//                 </div>

//                 <div className="flex flex-col">
//                   <label htmlFor="address" className="mb-1">
//                     Address
//                     <span className="text-red-500"> *</span>
//                   </label>
//                   <Input
//                     name="address"
//                     placeholder="Address"
//                     className="outline-none focus:outline-none w-full"
//                     value={formData.address}
//                     onChange={handleInputChange}
//                   />
//                 </div>

//                 <div className="flex flex-col">
//                   <label htmlFor="zoneRepresentative" className="mb-1">
//                     Zone Representative<span className="text-red-500"> *</span>
//                   </label>
//                   <ZoneRepresentativeDropDown
//                     key={zoneRepDropdownKey}
//                     onSelect={handleUserSelect}
//                     searchable={true}
//                     noResultsMessage="No users found"
//                     defaultValue="Select Manager"
//                   />
//                   {/* Display selected representatives */}
//                   {selectedRepNames.length > 0 && (
//                     <div className="mt-2">
//                       <p className="text-sm font-medium mb-1">
//                         Selected Representatives:
//                       </p>
//                       <div className="flex flex-wrap gap-2">
//                         {selectedRepNames.map((name, index) => (
//                           <div
//                             key={index}
//                             className="flex items-center bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm"
//                           >
//                             <span>{name}</span>
//                             <button
//                               type="button"
//                               className="ml-2 text-blue-600 hover:text-blue-800"
//                               onClick={() => removeRepresentative(index)}
//                             >
//                               ×
//                             </button>
//                           </div>
//                         ))}
//                       </div>
//                     </div>
//                   )}
//                 </div>

//                 <div className="flex flex-col">
//                   <label className="mb-1">Status</label>
//                   <div className="flex gap-4 mt-1">
//                     <label className="flex items-center gap-2 cursor-pointer">
//                       <input
//                         type="radio"
//                         name="status"
//                         value="active"
//                         checked={formData.status === "active"}
//                         onChange={(e) =>
//                           setFormData((prev) => ({
//                             ...prev,
//                             status: e.target.value,
//                           }))
//                         }
//                         className="form-radio h-4 w-4 text-blue-600"
//                       />
//                       <span>Active</span>
//                     </label>
//                     <label className="flex items-center gap-2 cursor-pointer">
//                       <input
//                         type="radio"
//                         name="status"
//                         value="inactive"
//                         checked={formData.status === "inactive"}
//                         onChange={(e) =>
//                           setFormData((prev) => ({
//                             ...prev,
//                             status: e.target.value,
//                           }))
//                         }
//                         className="form-radio h-4 w-4 text-blue-600"
//                       />
//                       <span>Inactive</span>
//                     </label>
//                   </div>
//                 </div>
//               </div>

//               {/* Right Side */}
//               <div className="space-y-4">
//                 <div className="flex flex-col">
//                   <label htmlFor="location" className="mb-1">
//                     Location<span className="text-red-500"> *</span>
//                   </label>
//                   <Input
//                     name="location"
//                     placeholder="Location"
//                     className="outline-none focus:outline-none w-full"
//                     value={formData.location}
//                     onChange={handleInputChange}
//                   />
//                 </div>

//                 <div className="flex flex-col">
//                   <label htmlFor="phoneNumber" className="mb-1">
//                     Phone Number<span className="text-red-500"> *</span>
//                   </label>
//                   <Input
//                     name="phoneNumber"
//                     placeholder="Phone Number"
//                     className="outline-none focus:outline-none w-full"
//                     value={formData.phoneNumber}
//                     onChange={handleInputChange}
//                     required
//                   />
//                 </div>

//                 <div className="flex flex-col">
//                   <div className="flex items-center gap-2">
//                     <label htmlFor="stores" className="mb-1">
//                       Stores <span className="text-red-500"> *</span>
//                     </label>
//                     <div
//                       className="cursor-pointer mb-1"
//                       onClick={handleSubCategoryIconClick}
//                       style={{ display: "inline-block" }}
//                     >
//                       <img
//                         src={plusIcon || "/placeholder.svg"}
//                         alt="Add sub-category"
//                         width={16}
//                       />
//                     </div>
//                   </div>

//                   <StoreDropDown
//                     key={storeDropdownKey}
//                     onSelect={handleStoreSelect}
//                     searchable={true}
//                     noResultsMessage="No stores found"
//                     defaultValue="Select Store"
//                   />
//                   {/* Display selected stores */}
//                   {selectedStoreNames.length > 0 && (
//                     <div className="mt-2">
//                       <p className="text-sm font-medium mb-1">
//                         Selected Stores:
//                       </p>
//                       <div className="flex flex-wrap gap-2">
//                         {selectedStoreNames.map((name, index) => (
//                           <div
//                             key={index}
//                             className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
//                           >
//                             <span>{name}</span>
//                             <button
//                               type="button"
//                               className="ml-2 text-green-600 hover:text-green-800"
//                               onClick={() => removeStore(index)}
//                             >
//                               ×
//                             </button>
//                           </div>
//                         ))}
//                       </div>
//                     </div>
//                   )}
//                 </div>

//                 <div className="flex justify-end gap-4 Poppins-font font-medium mt-8">
//                   <Button
//                     text="Cancel"
//                     type="button"
//                     onClick={() => navigate("/dashboard")}
//                     className="px-6 !bg-[#F4F4F5] !border-none"
//                   />
//                   {/* Conditionally render Save button based on permissions */}
//                   {canCreate && (
//                     <Button
//                       text={isSubmitting ? "Saving..." : "Save"}
//                       type="submit"
//                       disabled={isSubmitting}
//                       className="px-6 !bg-[#056BB7] border-none text-white"
//                     />
//                   )}
//                 </div>
//               </div>
//             </div>
//           </div>
//         </form>
//       </div>

//       {/* Zone Table */}
//       {loading ? (
//         <div className="flex justify-center items-center h-40">
//           <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
//         </div>
//       ) : (
//         <ZoneTable
//           columns={columns}
//           data={zoneData}
//           tableTitle="Zones"
//           tableDataAlignment="onlyZone"
//           onRowClick={handleRowClick}
//           canUpdate={canUpdate}
//           canDelete={canDelete}
//           onRefresh={handleRefresh}
//           key={refreshKey}
//           onDelete={handleDeleteZone}
//           onUpdate={handleZoneUpdate}
//         />
//       )}

//       {/* Zone Details Modal and Add Store Modal remain the same... */}
//       {/* Add Store Modal */}

//       {/* I'm truncating the rest for brevity, but they remain unchanged */}
//     </div>
//   );
// };

// export default AddZone;

"use client";

import type React from "react";
import { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { toast } from "react-toastify";
import Input from "../../../components/Input";
import Button from "../../../components/Button";
import plusIcon from "../../../assets/plus.svg";
import ZoneRepresentativeDropDown, {
  type ZoneRepresentativeDropDownRef,
} from "../../../components/ZoneRepresentativeDropDown";
import StoreDropDown, {
  type StoreDropDownRef,
} from "../../../components/StoreDropDown";
import ZoneTable from "../../../components/ZoneTable";
import { hasPermission } from "../sections/CoreSettings";
import type { UploadFile, UploadProps } from "antd";
import { Image, message, Upload } from "antd";
import PhoneInput from "react-phone-number-input";
import { isValidPhoneNumber } from "react-phone-number-input";
import "react-phone-number-input/style.css";
import { DeleteOutlined, InboxOutlined } from "@ant-design/icons";
import AddStoreDropDown from "../../../components/AddStoreDropDown";
import ManagerDropDown from "../../../components/ManagerDropDown";
import { AiFillInstagram } from "react-icons/ai";
import { BiLogoLinkedinSquare } from "react-icons/bi";
import { FiUpload } from "react-icons/fi";
import { FaFacebook } from "react-icons/fa";

// Helper function to get user role
const getUserRole = () => {
  let role = localStorage.getItem("role");
  if (!role) {
    role = sessionStorage.getItem("role");
  }
  return role;
};

// Helper function to get auth token
const getAuthToken = () => {
  let token = localStorage.getItem("token");
  if (!token) {
    token = sessionStorage.getItem("token");
  }
  return token;
};

interface ZoneData {
  id: string;
  name: string;
  status: string;
  _id: string;
  zoneId?: string;
}

interface Column {
  header: string;
  accessor: string;
  type?: "text" | "image" | "status" | "actions";
}

interface ZoneDetail {
  _id: string;
  zoneId: string;
  name: string;
  location: string;
  address: string;
  phoneNumber: string;
  status: string;
  zoneRepresentative: Array<{
    _id: string;
    firstName: string;
    lastName: string;
  }>;
  stores: Array<{
    _id: string;
    storeName: string;
  }>;
}

const AddZone: React.FC = () => {
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [zoneData, setZoneData] = useState<ZoneData[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [selectedZone, setSelectedZone] = useState<ZoneDetail | null>(null);
  const [loadingZoneDetails, setLoadingZoneDetails] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState(false);
  const [phoneError, setPhoneError] = useState<string>("");
  const [phoneValue, setPhoneValue] = useState<string | undefined>(undefined);
  // Add this with your other state variables
  const [storeDropdownRefreshKey, setStoreDropdownRefreshKey] = useState(0);

  // Add refs for dropdown components
  const zoneRepDropdownRef = useRef<ZoneRepresentativeDropDownRef>(null);
  const storeDropdownRef = useRef<StoreDropDownRef>(null);

  // Add these state variables inside AddZone component
  const [isAddStoreModalOpen, setIsAddStoreModalOpen] = useState(false);
  const [prefixData, setPrefixData] = useState<any[]>([]);
  const [selectedPrefix, setSelectedPrefix] = useState<string>("Prefix");
  const [autoGeneratedId, setAutoGeneratedId] = useState<string>("");
  const [prefixIdMap, setPrefixIdMap] = useState<Record<string, string>>({});
  const [isLoadingData, setIsLoadingData] = useState<boolean>(false);

  // Permission variables add
  const userRole = getUserRole();
  const isAdmin = userRole === "Admin" || userRole === "SuperAdmin";
  const canCreate = isAdmin || hasPermission("Core Setting", "create");
  const canUpdate = isAdmin || hasPermission("Core Setting", "update");
  const canDelete = isAdmin || hasPermission("Core Setting", "delete");

  // Form state
  const [formData, setFormData] = useState({
    name: "",
    location: "",
    address: "",
    phoneNumber: "",
    zoneRepresentative: [] as string[],
    stores: [] as string[],
    status: "active",
  });

  // Handle phone number change
  const handlePhoneChange = (value: string | undefined) => {
    setPhoneValue(value);
    setPhoneError("");

    if (value) {
      // Validate phone number
      if (!isValidPhoneNumber(value)) {
        setPhoneError("Please enter a valid phone number");
      }

      // Update form data
      setFormData((prev) => ({
        ...prev,
        phoneNumber: value,
      }));
    } else {
      setFormData((prev) => ({
        ...prev,
        phoneNumber: "",
      }));
    }
  };

  const columns: Column[] = [
    { header: "S.no", accessor: "id" },
    { header: "Zone Name", accessor: "name", type: "text" },
    { header: "Store Name", accessor: "store", type: "text" },
    { header: "Status", accessor: "status", type: "status" },
    { header: "Actions", accessor: "actions", type: "actions" },
  ];

  // Store form data
  const [storeFormData, setStoreFormData] = useState({
    storeName: "",
    location: "",
    managerId: "",
    phoneNumber: "",
    email: "",
    status: "active",
    facebookLink: "",
    instagramLink: "",
    linkedinLink: "",
    selectedPrefixId: "",
  });

  // For store logo and images
  const [storeLogo, setStoreLogo] = useState<UploadFile | null>(null);
  const [storeImage, setStoreImage] = useState<UploadFile[]>([]);
  const [storeLogoStatus, setStoreLogoStatus] = useState<
    "success" | "error" | null
  >(null);
  const [storeImageStatus, setStoreImageStatus] = useState<
    "success" | "error" | null
  >(null);

  // Selected names for display purposes
  const [selectedRepNames, setSelectedRepNames] = useState<string[]>([]);
  const [selectedStoreNames, setSelectedStoreNames] = useState<string[]>([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [deleteModal, setDeleteModal] = useState(false);
  const [refreshKey, setRefreshKey] = useState(0);
  const [isSubCategoryModalOpen, setIsSubCategoryModalOpen] = useState(false);
  const [zoneRepDropdownKey, setZoneRepDropdownKey] = useState(0);
  const [storeDropdownKey, setStoreDropdownKey] = useState(0);

  // Add reset trigger states
  const [zoneRepResetTrigger, setZoneRepResetTrigger] = useState(0);
  const [storeResetTrigger, setStoreResetTrigger] = useState(0);

  const fetchZones = async () => {
    try {
      const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const response = await axios.get(
        `${API_URL}/api/abid-jewelry-ms/getAllZones`,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data.success) {
        // console.log("response.data.data", response.data.data);

        const formattedData = response.data.data.map((zone: any) => ({
          id: zone._id.substring(0, 5),
          _id: zone._id,
          zoneId: zone.zoneId,
          name: zone.name,
          store: zone.stores.map((s: any) => s.storeName).join(", "),
          status: zone.status.charAt(0).toUpperCase() + zone.status.slice(1),
        }));

        setZoneData(formattedData);
      } else {
        toast.error(response.data.message || "Failed to fetch zones");
      }
    } catch (error) {
      console.error("Error fetching zones:", error);
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          toast.error("Network error. Please check your internet connection.");
        } else {
          toast.error(error.response.data.message || "Failed to fetch zones");
        }
      } else {
        toast.error("An unexpected error occurred while fetching zones");
      }
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = () => {
    setRefreshKey((prev) => prev + 1);
    fetchZones();
  };

  // Check permissions on component mount
  useEffect(() => {
    if (!canCreate) {
      toast.error("You don't have permission to add zones");
    }
  }, [canCreate]);

  // Fetch zones data
  useEffect(() => {
    fetchZones();
  }, []);

  const fetchStores = async () => {
    setIsLoading(true);
    try {
      const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
      const token = getAuthToken();
      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }
      const response = await axios.get(
        `${API_URL}/api/abid-jewelry-ms/getAllShops`,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "application/json",
          },
        }
      );
      if (response.data.success && Array.isArray(response.data.data)) {
        // setStores(response.data.data);
        // console.log("Stores fetched:", response.data.data);
      } else {
        toast.warning("No stores found or invalid response format");
      }
    } catch (error) {
      console.error("Error fetching stores:", error);
      toast.error("Failed to fetch stores");
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch zone details when a row is clicked
  const fetchZoneDetails = async (zoneId: string) => {
    setLoadingZoneDetails(true);
    try {
      const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const response = await axios.get(
        `${API_URL}/api/abid-jewelry-ms/getOneZone/${zoneId}`,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data.success) {
        setSelectedZone(response.data.data);
      } else {
        toast.error(response.data.message || "Failed to fetch zone details");
      }
    } catch (error) {
      console.error("Error fetching zone details:", error);
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          toast.error("Network error. Please check your internet connection.");
        } else {
          toast.error(
            error.response.data.message || "Failed to fetch zone details"
          );
        }
      } else {
        toast.error("An unexpected error occurred while fetching zone details");
      }
    } finally {
      setLoadingZoneDetails(false);
    }
  };

  // Handle row click to show zone details
  const handleRowClick = (row: ZoneData) => {
    if (row._id) {
      fetchZoneDetails(row._id);
    }
  };

  // Handle user selection for zone representative
  const handleUserSelect = (userId: string, userName: string) => {
    // Check if the user is already selected
    if (!formData.zoneRepresentative.includes(userId)) {
      setFormData((prev) => ({
        ...prev,
        zoneRepresentative: [...prev.zoneRepresentative, userId],
      }));
      setSelectedRepNames((prev) => [...prev, userName]);
    } else {
      toast.info("This representative is already selected");
    }
  };

  // Handle store selection
  const handleStoreSelect = (storeId: string, storeName: string) => {
    // Check if the store is already selected
    if (!formData.stores.includes(storeId)) {
      setFormData((prev) => ({
        ...prev,
        stores: [...prev.stores, storeId],
      }));
      setSelectedStoreNames((prev) => [...prev, storeName]);
    } else {
      toast.info("This store is already selected");
    }
  };
  // Handle input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Check permissions before submitting
    if (!canCreate) {
      toast.error("You don't have permission to add zones");
      return;
    }

    if (!formData.name) {
      toast.error("Zone name is required");
      return;
    }

    if (!formData.location) {
      toast.error("Location is required");
      return;
    }

    if (formData.zoneRepresentative.length === 0) {
      toast.error("At least one zone representative is required");
      return;
    }

    if (phoneValue && !isValidPhoneNumber(phoneValue)) {
      toast.error("Please enter a valid phone number");
      return;
    }

    setIsLoading(true);

    try {
      const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const response = await axios.post(
        `${API_URL}/api/abid-jewelry-ms/createZone`,
        formData,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data.success) {
        toast.success("Zone created successfully!");

        // Update local state with new zone
        const newZone = {
          id: response.data.data._id.substring(0, 5),
          _id: response.data.data._id,
          zoneId: response.data.data.zoneId,
          name: response.data.data.name,
          store:
            response.data.data.stores
              ?.map((s: any) => s.storeName)
              .join(", ") || "",
          status:
            response.data.data.status.charAt(0).toUpperCase() +
            response.data.data.status.slice(1),
        };
        setZoneData((prev) => [...prev, newZone]);

        // Reset form
        // setFormData({
        //   name: "",
        //   location: "",
        //   address: "",
        //   phoneNumber: "",
        //   zoneRepresentative: [],
        //   stores: [],
        //   status: "active",
        // });
        // setSelectedRepNames([]);
        // setSelectedStoreNames([]);

        // // Reset dropdowns after successful form submission
        // setZoneRepDropdownKey((prev) => prev + 1);
        // setStoreDropdownKey((prev) => prev + 1);
        // setZoneRepResetTrigger((prev) => prev + 1);
        // setStoreResetTrigger((prev) => prev + 1);

        setFormData({
          name: "",
          location: "",
          address: "",
          phoneNumber: "",
          zoneRepresentative: [],
          stores: [],
          status: "active",
        });
        setSelectedRepNames([]);
        setSelectedStoreNames([]);
        setPhoneValue(undefined);
        setPhoneError("");

        // Reset dropdowns after successful form submission
        setZoneRepDropdownKey((prev) => prev + 1);
        setStoreDropdownKey((prev) => prev + 1);
        setZoneRepResetTrigger((prev) => prev + 1);
        setStoreResetTrigger((prev) => prev + 1);
        await fetchZones();
      } else {
        toast.error(response.data.message || "Failed to create zone");
      }
    } catch (error) {
      console.error("Error creating zone:", error);
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          toast.error("Network error. Please check your internet connection.");
        } else {
          toast.error(error.response.data.message || "Failed to create zone");
        }
      } else {
        toast.error("An unexpected error occurred while creating zone");
      }
    } finally {
      setIsLoading(false);
    }
  };

  // Handle zone deletion
  const handleDeleteZone = async (row: ZoneData) => {
    try {
      const API_URL = import.meta.env.VITE_BASE_URL || "http://localhost:9000";
      const token = getAuthToken();

      if (!token) {
        toast.error("Authentication token not found. Please login again.");
        return;
      }

      const response = await axios.delete(
        `${API_URL}/api/abid-jewelry-ms/deleteZone/${row._id}`,
        {
          headers: {
            "x-access-token": token,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data.success) {
        toast.success("Zone deleted successfully!");
        // Remove the deleted zone from the list
        setZoneData(zoneData.filter((zone) => zone._id !== row._id));
      } else {
        toast.error(response.data.message || "Failed to delete zone");
      }
    } catch (error) {
      console.error("Error deleting zone:", error);
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          toast.error("Network error. Please check your internet connection.");
        } else {
          toast.error(error.response.data.message || "Failed to delete zone");
        }
      } else {
        toast.error("An unexpected error occurred while deleting zone");
      }
    }
  };
  const handleSubCategoryIconClick = () => {
    console.log("Add store icon clicked");
    setIsAddStoreModalOpen(true);
    fetchPrefixes(); // Fetch prefixes when opening modal
  };

  // Add upload props
  const { Dragger } = Upload;

  // Store logo upload props
  const storeLogoProps: UploadProps = {
    name: "file",
    showUploadList: false,
    maxCount: 1,
    beforeUpload: (file) => {
      const isJpgOrPng =
        file.type === "image/jpeg" || file.type === "image/png";
      if (!isJpgOrPng) {
        message.error("You can only upload JPG/PNG file!");
      }
      const isLt5M = file.size / 1024 / 1024 < 5;
      if (!isLt5M) {
        message.error("Image must be smaller than 5MB!");
      }

      if (isJpgOrPng && isLt5M) {
        setStoreLogo({
          ...file,
          status: "done",
          url: URL.createObjectURL(file),
          thumbUrl: URL.createObjectURL(file),
          originFileObj: file,
        } as UploadFile);
        setStoreLogoStatus("success");
      }
      return false;
    },
  };

  // Store image upload props
  const storeImageProps: UploadProps = {
    name: "file",
    multiple: false,
    beforeUpload: (file) => {
      const isValidFile = file.size / 1024 / 1024 < 5;
      if (!isValidFile) {
        message.error("File must be smaller than 5MB!");
        return false;
      }

      setStoreImage((prev) => {
        const newFile = {
          ...file,
          status: "done",
          url: URL.createObjectURL(file),
          thumbUrl: URL.createObjectURL(file),
          originFileObj: file,
          uid: Date.now().toString(),
        } as UploadFile;
        return [...prev, newFile];
      });
      setStoreImageStatus("success");
      return false;
    },
    onRemove: (file) => {
      setStoreImage((prev) => prev.filter((item) => item.uid !== file.uid));
      if (storeImage.length <= 1) {
        setStoreImageStatus(null);
      }
      return true;
    },
    fileList: storeImage,
  };

  return (
    <div className="w-full mx-auto px-3 py-6 sm:px-4 md:px-6 xl:px-8 xl:py-6">
      <div className="bg-white rounded-lg shadow-md px-4 md:px-10 py-6 mb-10">
        <form className="" onSubmit={handleSubmit}>
          <div className="">
            {/* Top Side */}
            <p className="Source-Sans-Pro-font text-[#056BB7] font-semibold text-[24px] m-0">
              Add New Zone
            </p>
            <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-12 lg:gap-16 xl:gap-32 text-[15px] Poppins-font font-medium">
              {/* Left Side */}
              <div className="space-y-4">
                <div className="flex flex-col">
                  <label htmlFor="name" className="mb-1">
                    Zone Name <span className="text-red-500"> *</span>
                  </label>
                  <Input
                    name="name"
                    placeholder="Zone Name"
                    className="outline-none focus:outline-none w-full"
                    value={formData.name}
                    onChange={handleInputChange}
                    // required
                  />
                </div>

                <div className="flex flex-col">
                  <label htmlFor="address" className="mb-1">
                    Address
                    <span className="text-red-500"> *</span>
                  </label>
                  <Input
                    name="address"
                    placeholder="Address"
                    className="outline-none focus:outline-none w-full"
                    value={formData.address}
                    onChange={handleInputChange}
                  />
                </div>

                <div className="flex flex-col">
                  <label htmlFor="zoneRepresentative" className="mb-1">
                    Zone Representative<span className="text-red-500"> *</span>
                  </label>
                  <ZoneRepresentativeDropDown
                    ref={zoneRepDropdownRef}
                    key={zoneRepDropdownKey}
                    onSelect={handleUserSelect}
                    searchable={true}
                    noResultsMessage="No users found"
                    defaultValue="Select Manager"
                    resetTrigger={zoneRepResetTrigger}
                  />
                  {/* Display selected representatives */}
                  {selectedRepNames.length > 0 && (
                    <div className="mt-2">
                      <p className="text-sm font-medium mb-1">
                        Selected Representatives:
                      </p>
                      <div className="flex flex-wrap gap-2">
                        {selectedRepNames.map((name, index) => (
                          <div
                            key={index}
                            className="flex items-center bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm"
                          >
                            <span>{name}</span>
                            <button
                              type="button"
                              className="ml-2 text-blue-600 hover:text-blue-800"
                              onClick={() => removeRepresentative(index)}
                            >
                              ×
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                <div className="flex flex-col">
                  <label className="mb-1">Status</label>
                  <div className="flex gap-4 mt-1">
                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="radio"
                        name="status"
                        value="active"
                        checked={formData.status === "active"}
                        onChange={(e) =>
                          setFormData((prev) => ({
                            ...prev,
                            status: e.target.value,
                          }))
                        }
                        className="form-radio h-4 w-4 text-blue-600"
                      />
                      <span>Active</span>
                    </label>
                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="radio"
                        name="status"
                        value="inactive"
                        checked={formData.status === "inactive"}
                        onChange={(e) =>
                          setFormData((prev) => ({
                            ...prev,
                            status: e.target.value,
                          }))
                        }
                        className="form-radio h-4 w-4 text-blue-600"
                      />
                      <span>Inactive</span>
                    </label>
                  </div>
                </div>
              </div>

              {/* Right Side */}
              <div className="space-y-4">
                <div className="flex flex-col">
                  <label htmlFor="location" className="mb-1">
                    Location<span className="text-red-500"> *</span>
                  </label>
                  <Input
                    name="location"
                    placeholder="Location"
                    className="outline-none focus:outline-none w-full"
                    value={formData.location}
                    onChange={handleInputChange}
                  />
                </div>

                {/* <div className="flex flex-col">
                  <label htmlFor="phoneNumber" className="mb-1">
                    Phone Number<span className="text-red-500"> *</span>
                  </label>
                  <Input
                    name="phoneNumber"
                    placeholder="Phone Number"
                    className="outline-none focus:outline-none w-full"
                    value={formData.phoneNumber}
                    onChange={handleInputChange}
                    // required
                  />
                </div> */}

                {/* Phone Number Input with react-phone-number-input */}
                <div className="flex flex-col">
                  <label htmlFor="phoneNumber" className="mb-1">
                    Phone Number<span className="text-red-500"> *</span>
                  </label>
                  <PhoneInput
                    placeholder="Enter phone number"
                    value={phoneValue}
                    onChange={handlePhoneChange}
                    defaultCountry="GB"
                    international
                    countryCallingCodeEditable={false}
                    className={`phone-input-container ${
                      phoneError ? "border-red-500" : ""
                    }`}
                    style={{
                      "--PhoneInputCountryFlag-height": "1em",
                      "--PhoneInputCountrySelectArrow-color": "#6b7280",
                    }}
                  />
                  {phoneError && (
                    <span className="text-red-500 text-xs mt-1">
                      {phoneError}
                    </span>
                  )}
                  <span className="text-gray-500 text-xs mt-1">
                    Phone number with country code (UK selected by default)
                  </span>
                </div>

                <div className="flex flex-col">
                  <div className="flex items-center gap-2">
                    <label htmlFor="stores" className="mb-1">
                      Stores <span className="text-red-500"> *</span>
                    </label>
                    <div
                      className="cursor-pointer mb-1"
                      onClick={handleSubCategoryIconClick}
                      style={{ display: "inline-block" }}
                    >
                      <img
                        src={plusIcon || "/placeholder.svg"}
                        alt="Add sub-category"
                        width={16}
                      />
                    </div>
                  </div>

                  {/* <StoreDropDown
                    ref={storeDropdownRef}
                    key={storeDropdownKey}
                    onSelect={handleStoreSelect}
                    searchable={true}
                    noResultsMessage="No stores found"
                    defaultValue="Select Store"
                    resetTrigger={storeResetTrigger}
                  /> */}

                  <StoreDropDown
                    ref={storeDropdownRef}
                    key={`${storeDropdownKey}-${storeDropdownRefreshKey}`} // Updated key
                    onSelect={handleStoreSelect}
                    searchable={true}
                    noResultsMessage="No stores found"
                    defaultValue="Select Store"
                    resetTrigger={storeResetTrigger}
                  />

                  {/* Display selected stores */}
                  {selectedStoreNames.length > 0 && (
                    <div className="mt-2">
                      <p className="text-sm font-medium mb-1">
                        Selected Stores:
                      </p>
                      <div className="flex flex-wrap gap-2">
                        {selectedStoreNames.map((name, index) => (
                          <div
                            key={index}
                            className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
                          >
                            <span>{name}</span>
                            <button
                              type="button"
                              className="ml-2 text-green-600 hover:text-green-800"
                              onClick={() => removeStore(index)}
                            >
                              ×
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                <div className="flex justify-end gap-4 Poppins-font font-medium mt-8">
                  <Button
                    text="Cancel"
                    type="button"
                    onClick={() => navigate("/dashboard")}
                    className="px-6 !bg-[#F4F4F5] !border-none"
                  />
                  {/* Conditionally render Save button based on permissions */}
                  {canCreate && (
                    <Button
                      text={isLoading ? "Saving..." : "Save"}
                      type="submit"
                      disabled={isLoading}
                      className={`px-6 !bg-[#056BB7] border-none text-white ${
                        isLoading ? "opacity-70 cursor-not-allowed" : ""
                      }`}
                    />
                  )}
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>

      {/* Zone Table */}
      {loading ? (
        <div className="flex justify-center items-center h-40">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      ) : (
        <ZoneTable
          columns={columns}
          data={zoneData}
          tableTitle="Zones"
          tableDataAlignment="onlyZone"
          onRowClick={handleRowClick}
          canUpdate={canUpdate}
          canDelete={canDelete}
          onRefresh={handleRefresh}
          key={refreshKey}
          onDelete={handleDeleteZone}
          onUpdate={handleZoneUpdate}
        />
      )}

      {/* Zone Details Modal remains the same... */}

      {isAddStoreModalOpen && (
        <div
          className="fixed inset-0 flex items-center justify-center bg-black/20 z-50"
          onClick={() => setIsAddStoreModalOpen(false)}
        >
          <div
            className="animate-scaleIn bg-white rounded-xl w-full max-w-6xl mx-4 relative shadow-lg max-h-[90vh] overflow-y-auto"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-semibold text-[#056BB7]">
                  Add New Store
                </h3>
                <button
                  onClick={() => setIsAddStoreModalOpen(false)}
                  className="text-xl font-bold text-gray-500 hover:text-gray-700"
                >
                  ×
                </button>
              </div>

              <form
                onSubmit={handleStoreSubmit}
                className="grid grid-cols-1 md:grid-cols-2 gap-8 text-[15px] Poppins-font font-medium"
              >
                {/* Left Side - Keep existing fields */}
                <div className="space-y-4">
                  <div className="flex flex-col">
                    <label className="mb-1">
                      Store ID <span className="text-red-500"> *</span>
                    </label>
                    <div className="flex items-center gap-3 w-full">
                      <div className="w-[35%]">
                        <AddStoreDropDown
                          defaultValue="Prefix"
                          options={prefixData.map((prefix) => prefix.name)}
                          className="!w-[100%] border"
                          onSelect={(value: string) => {
                            setSelectedPrefix(value);
                            const selectedPrefixObj = prefixData.find(
                              (prefix) => prefix.name === value
                            );
                            if (selectedPrefixObj) {
                              setStoreFormData((prev) => ({
                                ...prev,
                                selectedPrefixId: selectedPrefixObj._id,
                              }));
                            }
                            if (prefixIdMap[value]) {
                              setAutoGeneratedId(prefixIdMap[value]);
                            } else {
                              const randomNum = Math.floor(
                                100000 + Math.random() * 900000
                              );
                              const newId = randomNum.toString();
                              setPrefixIdMap((prev) => ({
                                ...prev,
                                [value]: newId,
                              }));
                              setAutoGeneratedId(newId);
                            }
                          }}
                          searchable={true}
                          noResultsMessage="No prefix found"
                        />
                      </div>
                      <span>-</span>
                      <input
                        type="text"
                        placeholder="Auto Generate"
                        value={autoGeneratedId}
                        readOnly
                        className="w-[65%] px-4 py-2 text-sm text-gray-700 placeholder-gray-400 border border-gray-300 outline-none rounded-md"
                      />
                    </div>
                  </div>

                  <div className="flex flex-col">
                    <label className="mb-1">
                      Store Name<span className="text-red-500"> *</span>
                    </label>
                    <Input
                      name="storeName"
                      placeholder="Downtown Branch"
                      className="outline-none focus:outline-none w-full"
                      value={storeFormData.storeName}
                      onChange={(e) =>
                        setStoreFormData((prev) => ({
                          ...prev,
                          storeName: e.target.value,
                        }))
                      }
                    />
                  </div>

                  <div className="flex flex-col">
                    <label className="mb-1">
                      Location<span className="text-red-500"> *</span>
                    </label>
                    <Input
                      name="location"
                      placeholder="Street, City, State, Zip Code, Country"
                      className="outline-none focus:outline-none w-full"
                      value={storeFormData.location}
                      onChange={(e) =>
                        setStoreFormData((prev) => ({
                          ...prev,
                          location: e.target.value,
                        }))
                      }
                    />
                  </div>

                  <div className="flex flex-col">
                    <label className="mb-1">
                      Manager<span className="text-red-500"> *</span>
                    </label>
                    <ManagerDropDown
                      onSelect={(userId: string, userName: string) => {
                        setStoreFormData((prev) => ({
                          ...prev,
                          managerId: userId,
                        }));
                      }}
                      searchable={true}
                      className="outline-none focus:outline-none w-full"
                      noResultsMessage="No manager found"
                    />
                  </div>

                  <div className="flex flex-col">
                    <label className="mb-1">
                      Phone No<span className="text-red-500"> *</span>
                    </label>
                    <Input
                      name="phoneNumber"
                      placeholder="+56 362738233"
                      className="outline-none focus:outline-none w-full"
                      value={storeFormData.phoneNumber}
                      onChange={(e) =>
                        setStoreFormData((prev) => ({
                          ...prev,
                          phoneNumber: e.target.value,
                        }))
                      }
                    />
                  </div>

                  <div className="flex flex-col">
                    <label className="mb-1">
                      Email<span className="text-red-500"> *</span>
                    </label>
                    <Input
                      name="email"
                      placeholder="john@example.com"
                      className="outline-none focus:outline-none w-full"
                      value={storeFormData.email}
                      onChange={(e) =>
                        setStoreFormData((prev) => ({
                          ...prev,
                          email: e.target.value,
                        }))
                      }
                    />
                  </div>

                  <div className="flex flex-col">
                    <span className="text-sm font-medium mb-2">Status</span>
                    <div className="flex gap-4">
                      <label className="flex items-center gap-2 text-sm border px-3 py-2 border-gray-200 rounded-md">
                        <input
                          type="radio"
                          name="storeStatus"
                          value="active"
                          className="accent-blue-600"
                          checked={storeFormData.status === "active"}
                          onChange={(e) =>
                            setStoreFormData((prev) => ({
                              ...prev,
                              status: e.target.value,
                            }))
                          }
                        />
                        Active
                      </label>
                      <label className="flex items-center gap-2 text-sm border px-2 py-2 border-gray-200 rounded-md">
                        <input
                          type="radio"
                          name="storeStatus"
                          value="inactive"
                          className="accent-blue-600"
                          checked={storeFormData.status === "inactive"}
                          onChange={(e) =>
                            setStoreFormData((prev) => ({
                              ...prev,
                              status: e.target.value,
                            }))
                          }
                        />
                        Inactive
                      </label>
                    </div>
                  </div>
                </div>

              </form>
            </div>
          </div>
        </div>
      )}

      <style>{`
  .PhoneInput {
    display: flex;
    align-items: center;
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    padding: 0.75rem 1rem;
    background-color: white;
    font-size: 0.875rem;
    transition: all 0.2s ease-in-out;
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  }

  .PhoneInput:hover {
    border-color: #d1d5db;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
  }

  .PhoneInputCountrySelect {
    margin-right: 1rem;
    border: none;
    background: transparent;
    font-size: 0.875rem;
    cursor: pointer;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    transition: background-color 0.2s ease-in-out;
  }

  .PhoneInputCountrySelect:hover {
    background-color: #f9fafb;
  }

  .PhoneInputCountrySelect:focus {
    outline: none;
    background-color: #f3f4f6;
  }

  .PhoneInputInput {
    border: none;
    outline: none;
    flex: 1;
    font-size: 0.875rem;
    background: transparent;
    color: #374151;
    font-weight: 400;
  }

  .PhoneInputInput::placeholder {
    color: #9ca3af;
    font-weight: 400;
  }

  .phone-input-container.border-red-500 .PhoneInput {
    border-color: #ef4444;
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }
`}</style>
    </div>
  );
};

export default AddZone
